{"version":3,"file":"ngx-ytd-api-comments.js.map","sources":["ng://ngx-ytd-api/comments/ytd-api-comments.service.ts","ng://ngx-ytd-api/comments/ytd-api-comments.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SimpleHttpService } from 'ngx-simple-http';\nimport { Observable } from 'rxjs';\nimport {\n  NgxYtdApiCommentsDeleteOpts,\n  NgxYtdApiCommentsInsertOpts,\n  NgxYtdApiCommentsListOpts,\n  NgxYtdApiCommentsListResult,\n  NgxYtdApiCommentsMarkAsSpamOpts,\n  NgxYtdApiCommentsResource,\n  NgxYtdApiCommentsSetModerationStatusOpts,\n  NgxYtdApiCommentsUpdateOpts\n} from './ytd-api-comments.interface';\nimport { HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxYtdApiCommentsService {\n  constructor(\n    private http: SimpleHttpService\n  ) { }\n  /**\n   * The API URL for the Comments API of the YouTube Data v3 API\n   */\n  readonly ngxYtdCommentsApiUrl = 'https://www.googleapis.com/youtube/v3/comments';\n  // Handler for HTTP requests\n  private _httpHandler<B extends any, P extends any, R extends any>(\n    apiEndpoint: string,\n    opts: P,\n    body: B = null,\n    httpType: 'delete' | 'get' | 'post' | 'put'\n  ): Observable<R> {\n    let headers: HttpHeaders;\n    if ('accessToken' in opts && typeof opts['accessToken'] !== undefined && opts['accessToken'] !== null) {\n      headers = new HttpHeaders()\n        .set('Authorization', `Bearer ${opts['accessToken']}`);\n    }\n    switch (httpType) {\n      case 'delete':\n        if (headers) {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts);\n        }\n      case 'get':\n        if (headers) {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts);\n        }\n      case 'post':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n      case 'put':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n    }\n  }\n  /**\n   * Deletes a comment\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/delete for more info\n   * @param opts Options for the API\n   * @return Results of the deletion as an `Observable`\n   */\n  delete(opts: NgxYtdApiCommentsDeleteOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiCommentsDeleteOpts, any>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      null,\n      'delete'\n    );\n  }\n  /**\n   * Creates a reply to an existing comment\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/insert for more info\n   * @param body The API body\n   * @param opts Options for the API\n   * @return Results of the creation as an `Observable`\n   */\n  insert(body: NgxYtdApiCommentsResource, opts: NgxYtdApiCommentsInsertOpts): Observable<any> {\n    return this._httpHandler<NgxYtdApiCommentsResource, NgxYtdApiCommentsInsertOpts, any>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      body,\n      'post'\n    );\n  }\n  /**\n   * Retrieves comments\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/list for more info\n   * @param opts Options for the API\n   * @return Results of the request as an `Observable`\n   */\n  list(opts: NgxYtdApiCommentsListOpts): Observable<NgxYtdApiCommentsListResult> {\n    return this._httpHandler<any, NgxYtdApiCommentsListOpts, NgxYtdApiCommentsListResult>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      null,\n      'get'\n    );\n  }\n  /**\n   * Flags one or more comments as spam\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/markAsSpam for more info\n   * @param opts Options for the API\n   * @return Results of the request as an `Observable`\n   */\n  markAsSpam(opts: NgxYtdApiCommentsMarkAsSpamOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiCommentsMarkAsSpamOpts, any>(\n      `${this.ngxYtdCommentsApiUrl}/markAsSpam`,\n      opts,\n      null,\n      'post'\n    );\n  }\n  /**\n   * Sets the moderation status of one or more comments\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/setModerationStatus for more info\n   * @param opts Options for the API\n   * @return Results of the request as an `Observable`\n   */\n  setModerationStatus(opts: NgxYtdApiCommentsSetModerationStatusOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiCommentsSetModerationStatusOpts, any>(\n      `${this.ngxYtdCommentsApiUrl}/setModerationStatus`,\n      opts,\n      null,\n      'post'\n    );\n  }\n  /**\n   * Modifies a comment\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/update for more info\n   * @param body The API body\n   * @param opts Options for the API\n   * @return Results of the update as an `Observable`\n   */\n  update(body: NgxYtdApiCommentsResource, opts: NgxYtdApiCommentsUpdateOpts): Observable<NgxYtdApiCommentsResource> {\n    return this._httpHandler<NgxYtdApiCommentsResource, NgxYtdApiCommentsUpdateOpts, NgxYtdApiCommentsResource>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      body,\n      'put'\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleHttpModule } from 'ngx-simple-http';\nimport { NgxYtdApiCommentsService } from './ytd-api-comments.service';\n\n@NgModule({\n  imports: [\n    SimpleHttpModule\n  ],\n  providers: [\n    NgxYtdApiCommentsService\n  ]\n})\nexport class NgxYtdApiCommentsModule { }\n"],"names":[],"mappings":"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"}
