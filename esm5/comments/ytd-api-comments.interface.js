//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieXRkLWFwaS1jb21tZW50cy5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gteXRkLWFwaS9jb21tZW50cy8iLCJzb3VyY2VzIjpbInl0ZC1hcGktY29tbWVudHMuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyBOZ3hZdGRBcGlHZW5lcmljT3B0cywgTmd4WXRkQXBpR2VuZXJpY1Jlc291cmNlLCBOZ3hZdGRBcGlTdGFuZGFyZE9wdHMgfSBmcm9tICduZ3gteXRkLWFwaS9jb3JlJztcbmltcG9ydCB7IE5neFl0ZEFwaUdlbmVyaWNPcHRzLCBOZ3hZdGRBcGlHZW5lcmljUmVzb3VyY2UsIE5neFl0ZEFwaVN0YW5kYXJkT3B0cyB9IGZyb20gJ25neC15dGQtYXBpL2NvbW1vbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmd4WXRkQXBpQ29tbWVudHNSZXNvdXJjZSBleHRlbmRzIE5neFl0ZEFwaUdlbmVyaWNSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgSUQgdGhhdCBZb3VUdWJlIHVzZXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhlIGNvbW1lbnQuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjaWQgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgaWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgc25pcHBldCBvYmplY3QgY29udGFpbnMgYmFzaWMgZGV0YWlscyBhYm91dCB0aGUgY29tbWVudC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cyNzbmlwcGV0IGZvciBtb3JlIGluZm9cbiAgICovXG4gIHNuaXBwZXQ/OiB7XG4gICAgLyoqXG4gICAgICogVGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgdXNlciB3aG8gcG9zdGVkIHRoZSBjb21tZW50LlxuICAgICAqXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cyNzbmlwcGV0LmF1dGhvckRpc3BsYXlOYW1lIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBhdXRob3JEaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgVVJMIGZvciB0aGUgYXZhdGFyIG9mIHRoZSB1c2VyIHdobyBwb3N0ZWQgdGhlIGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzI3NuaXBwZXQuYXV0aG9yUHJvZmlsZUltYWdlVXJsIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBhdXRob3JQcm9maWxlSW1hZ2VVcmw/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIFVSTCBvZiB0aGUgY29tbWVudCBhdXRob3IncyBZb3VUdWJlIGNoYW5uZWwsIGlmIGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC5hdXRob3JDaGFubmVsVXJsIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBhdXRob3JDaGFubmVsVXJsPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoaXMgb2JqZWN0IGVuY2Fwc3VsYXRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29tbWVudCBhdXRob3IncyBZb3VUdWJlIGNoYW5uZWwsIGlmIGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC5hdXRob3JDaGFubmVsSWQgZm9yIG1vcmUgaW5mb1xuICAgICAqL1xuICAgIGF1dGhvckNoYW5uZWxJZD86IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIElEIG9mIHRoZSBjb21tZW50IGF1dGhvcidzIFlvdVR1YmUgY2hhbm5lbCwgaWYgYXZhaWxhYmxlLlxuICAgICAgICpcbiAgICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC5hdXRob3JDaGFubmVsSWQudmFsdWUgZm9yIG1vcmUgaW5mb1xuICAgICAgICovXG4gICAgICB2YWx1ZT86IHN0cmluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBZb3VUdWJlIGNoYW5uZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb21tZW50LlxuICAgICAqIC0gSWYgdGhlIGNvbW1lbnQgaXMgYSB2aWRlbyBjb21tZW50LCB0aGVuIHRoaXMgcHJvcGVydHkgaWRlbnRpZmllcyB0aGUgdmlkZW8ncyBjaGFubmVsLFxuICAgICAqIGFuZCB0aGUgc25pcHBldC52aWRlb0lkIHByb3BlcnR5IGlkZW50aWZpZXMgdGhlIHZpZGVvLlxuICAgICAqIC0gSWYgdGhlIGNvbW1lbnQgaXMgYSBjaGFubmVsIGNvbW1lbnQsIHRoZW4gdGhpcyBwcm9wZXJ0eSBpZGVudGlmaWVzIHRoZSBjaGFubmVsIHRoYXQgdGhlIGNvbW1lbnQgaXMgYWJvdXQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzI3NuaXBwZXQuY2hhbm5lbElkIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBjaGFubmVsSWQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSB2aWRlbyB0aGF0IHRoZSBjb21tZW50IHJlZmVycyB0by4gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IHByZXNlbnQgaWYgdGhlIGNvbW1lbnQgd2FzIG1hZGUgb24gYSB2aWRlby5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC52aWRlb0lkIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICB2aWRlb0lkPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb21tZW50J3MgdGV4dC4gVGhlIHRleHQgY2FuIGJlIHJldHJpZXZlZCBpbiBlaXRoZXIgcGxhaW4gdGV4dCBvciBIVE1MLlxuICAgICAqXG4gICAgICogKFRoZSBgY29tbWVudHMubGlzdGAgYW5kIGBjb21tZW50VGhyZWFkcy5saXN0YCBtZXRob2RzXG4gICAgICogYm90aCBzdXBwb3J0IGEgYHRleHRGb3JtYXRgIHBhcmFtZXRlciwgd2hpY2ggc3BlY2lmaWVzIHRoZSBkZXNpcmVkIHRleHQgZm9ybWF0LilcbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBldmVuIHRoZSBwbGFpbiB0ZXh0IG1heSBkaWZmZXIgZnJvbSB0aGUgb3JpZ2luYWwgY29tbWVudCB0ZXh0LiBGb3IgZXhhbXBsZSwgaXQgbWF5IHJlcGxhY2UgdmlkZW8gbGlua3Mgd2l0aCB2aWRlbyB0aXRsZXMuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzI3NuaXBwZXQudGV4dERpc3BsYXkgZm9yIG1vcmUgaW5mb1xuICAgICAqL1xuICAgIHRleHREaXNwbGF5Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBvcmlnaW5hbCwgcmF3IHRleHQgb2YgdGhlIGNvbW1lbnQgYXMgaXQgd2FzIGluaXRpYWxseSBwb3N0ZWQgb3IgbGFzdCB1cGRhdGVkLlxuICAgICAqIFRoZSBvcmlnaW5hbCB0ZXh0IGlzIG9ubHkgcmV0dXJuZWQgaWYgaXQgaXMgYWNjZXNzaWJsZSB0byB0aGUgYXV0aGVudGljYXRlZCB1c2VyLFxuICAgICAqIHdoaWNoIGlzIG9ubHkgZ3VhcmFudGVlZCBpZiB0aGUgdXNlciBpcyB0aGUgY29tbWVudCdzIGF1dGhvci5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC50ZXh0T3JpZ2luYWwgZm9yIG1vcmUgaW5mb1xuICAgICAqL1xuICAgIHRleHRPcmlnaW5hbD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBwYXJlbnQgY29tbWVudC4gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IHNldCBpZiB0aGUgY29tbWVudCB3YXMgc3VibWl0dGVkIGFzIGEgcmVwbHkgdG8gYW5vdGhlciBjb21tZW50LlxuICAgICAqXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cyNzbmlwcGV0LnBhcmVudElkIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBwYXJlbnRJZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGlzIHNldHRpbmcgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGN1cnJlbnQgdmlld2VyIGNhbiByYXRlIHRoZSBjb21tZW50LlxuICAgICAqXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cyNzbmlwcGV0LmNhblJhdGUgZm9yIG1vcmUgaW5mb1xuICAgICAqL1xuICAgIGNhblJhdGU/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSByYXRpbmcgdGhlIHZpZXdlciBoYXMgZ2l2ZW4gdG8gdGhpcyBjb21tZW50LlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIHByb3BlcnR5IGRvZXMgbm90IGN1cnJlbnRseSBpZGVudGlmeSBkaXNsaWtlIHJhdGluZ3MsIHRob3VnaCB0aGlzIGJlaGF2aW9yIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqIEluIHRoZSBtZWFudGltZSwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIGxpa2UgaWYgdGhlIHZpZXdlciBoYXMgcmF0ZWQgdGhlIGNvbW1lbnQgcG9zaXRpdmVseS5cbiAgICAgKiBUaGUgdmFsdWUgaXMgbm9uZSBpbiBhbGwgb3RoZXIgY2FzZXMsIGluY2x1ZGluZyB0aGUgdXNlciBoYXZpbmcgZ2l2ZW4gdGhlIGNvbW1lbnQgYSBuZWdhdGl2ZSByYXRpbmcgb3Igbm90IGhhdmluZyByYXRlZCB0aGUgY29tbWVudC5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC52aWV3ZXJSYXRpbmcgZm9yIG1vcmUgaW5mb1xuICAgICAqL1xuICAgIHZpZXdlclJhdGluZz86ICdsaWtlJyB8ICdub25lJztcbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIGxpa2VzIChwb3NpdGl2ZSByYXRpbmdzKSB0aGUgY29tbWVudCBoYXMgcmVjZWl2ZWQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzI3NuaXBwZXQubGlrZUNvdW50IGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBsaWtlQ291bnQ/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbW1lbnQncyBtb2RlcmF0aW9uIHN0YXR1cy5cbiAgICAgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgcmV0dXJuZWQgaWYgdGhlIEFQSSByZXF1ZXN0IHdhcyBhdXRob3JpemVkIGJ5IHRoZSBvd25lciBvZiB0aGUgY2hhbm5lbFxuICAgICAqIG9yIHRoZSB2aWRlbyBvbiB3aGljaCB0aGUgcmVxdWVzdGVkIGNvbW1lbnRzIHdlcmUgbWFkZS5cbiAgICAgKiBJbiBhZGRpdGlvbiwgbm90ZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgbm90IHNldCBpZiB0aGUgQVBJIHJlcXVlc3QgdXNlZCB0aGUgaWQgZmlsdGVyIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC5tb2RlcmF0aW9uU3RhdHVzIGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICBtb2RlcmF0aW9uU3RhdHVzPzogJ2hlbGRGb3JSZXZpZXcnIHwgJ2xpa2VseVNwYW0nIHwgJ3B1Ymxpc2hlZCcgfCAncmVqZWN0ZWQnO1xuICAgIC8qKlxuICAgICAqIFRoZSBkYXRlIGFuZCB0aW1lIHdoZW4gdGhlIGNvbW1lbnQgd2FzIG9yaWduYWxseSBwdWJsaXNoZWQuIFRoZSB2YWx1ZSBpcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDEgKFlZWVktTU0tRERUaGg6bW06c3Muc1opIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMjc25pcHBldC5wdWJsaXNoZWRBdCBmb3IgbW9yZSBpbmZvXG4gICAgICovXG4gICAgcHVibGlzaGVkQXQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgYW5kIHRpbWUgd2hlbiB0aGUgY29tbWVudCB3YXMgbGFzdCB1cGRhdGVkLiBUaGUgdmFsdWUgaXMgc3BlY2lmaWVkIGluIElTTyA4NjAxIChZWVlZLU1NLUREVGhoOm1tOnNzLnNaKSBmb3JtYXQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzI3NuaXBwZXQudXBkYXRlZEF0IGZvciBtb3JlIGluZm9cbiAgICAgKi9cbiAgICB1cGRhdGVkQXQ/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmd4WXRkQXBpQ29tbWVudHNEZWxldGVPcHRzIGV4dGVuZHMgTmd4WXRkQXBpU3RhbmRhcmRPcHRzIHtcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCAyLjAgYWNjZXNzIHRva2VuXG4gICAqIE5vdGU6IFRoZSBgaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC95b3V0dWJlLmZvcmNlLXNzbGAgc2NvcGUgaXMgcmVxdWlyZWQgdG8gZGVsZXRlIGEgY29tbWVudFxuICAgKi9cbiAgYWNjZXNzVG9rZW46IHN0cmluZztcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgY29tbWVudCBJRCBmb3IgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgZGVsZXRlZFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzL2RlbGV0ZSNpZCBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5neFl0ZEFwaUNvbW1lbnRzSW5zZXJ0T3B0cyBleHRlbmRzIE5neFl0ZEFwaVN0YW5kYXJkT3B0cyB7XG4gIC8qKlxuICAgKiBUaGUgT0F1dGggMi4wIGFjY2VzcyB0b2tlblxuICAgKiBOb3RlOiBUaGUgYGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgveW91dHViZS5mb3JjZS1zc2xgIHNjb3BlIGlzIHJlcXVpcmVkIHRvIGRlbGV0ZSBhIGNvbW1lbnRcbiAgICovXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgdGhhdCB0aGUgQVBJIHdpbGwgaW5jbHVkZVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzL2luc2VydCNwYXJ0IGZvciBtb3JlIGluZm9cbiAgICovXG4gIHBhcnQ6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTmd4WXRkQXBpQ29tbWVudHNMaXN0T3B0cyBleHRlbmRzIE5neFl0ZEFwaUdlbmVyaWNPcHRzIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGNvbW1lbnQgSURzIGZvciB0aGUgcmVzb3VyY2VzIHRoYXQgYXJlIGJlaW5nIHJldHJpZXZlZC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBwYXJhbWV0ZXIgaXMgYSBmaWx0ZXIsIHdoZXJlIG9ubHkgb25lIGZpbHRlciBzaG91bGQgYmUgc3BlY2lmaWVkXG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMvbGlzdCNpZCBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBpZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgSUQgb2YgdGhlIGNvbW1lbnQgZm9yIHdoaWNoIHJlcGxpZXMgc2hvdWxkIGJlIHJldHJpZXZlZC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBwYXJhbWV0ZXIgaXMgYSBmaWx0ZXIsIHdoZXJlIG9ubHkgb25lIGZpbHRlciBzaG91bGQgYmUgc3BlY2lmaWVkXG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMvbGlzdCNwYXJlbnRJZCBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBwYXJlbnRJZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdGhhdCBzaG91bGQgYmUgcmV0dXJuZWQgaW4gdGhlIHJlc3VsdHMuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgcGFyYW1ldGVyIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBpZCBwYXJhbWV0ZXIuXG4gICAqIEFjY2VwdGFibGUgdmFsdWVzIGFyZSAxIHRvIDEwMCwgaW5jbHVzaXZlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAyMC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cy9saXN0I21heFJlc3VsdHMgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgbWF4UmVzdWx0cz86IG51bWJlcjtcbiAgLyoqXG4gICAqIElkZW50aWZpZXMgYSBzcGVjaWZpYyBwYWdlIGluIHRoZSByZXN1bHQgc2V0IHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIHBhcmFtZXRlciBpcyBub3Qgc3VwcG9ydGVkIGZvciB1c2UgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgaWQgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzL2xpc3QjcGFnZVRva2VuIGZvciBtb3JlIGluZm9cbiAgICovXG4gIHBhZ2VUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBBUEkgc2hvdWxkIHJldHVybiBjb21tZW50cyBmb3JtYXR0ZWQgYXMgSFRNTCBvciBhcyBwbGFpbiB0ZXh0LlxuICAgKlxuICAgKiBBY2NlcHRhYmxlIHZhbHVlcyBhcmU6XG4gICAqIC0gaHRtbCDigJMgUmV0dXJucyB0aGUgY29tbWVudHMgaW4gSFRNTCBmb3JtYXQuIFRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAqIC0gcGxhaW5UZXh0IOKAkyBSZXR1cm5zIHRoZSBjb21tZW50cyBpbiBwbGFpbiB0ZXh0IGZvcm1hdC5cbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cy9saXN0I3RleHRGb3JtYXQgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgdGV4dEZvcm1hdD86ICdodG1sJyB8ICdwbGFpblRleHQnO1xufVxuXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBOZ3hZdGRBcGlDb21tZW50TGlzdFJlc291cmNlfVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIE5neFl0ZEFwaUNvbW1lbnRzTGlzdFJlc3VsdEl0ZW0gZXh0ZW5kcyBOZ3hZdGRBcGlDb21tZW50c1Jlc291cmNlIHsgfVxuXG5leHBvcnQgaW50ZXJmYWNlIE5neFl0ZEFwaUNvbW1lbnRzTGlzdFJlc3VsdCBleHRlbmRzIE5neFl0ZEFwaUdlbmVyaWNSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgdmFsdWUgb2YgdGhlIGBwYWdlVG9rZW5gIHBhcmFtZXRlciB0byByZXRyaWV2ZSB0aGUgbmV4dCBwYWdlIGluIHRoZSByZXN1bHQgc2V0LlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzL2xpc3QjbmV4dFBhZ2VUb2tlblxuICAgKi9cbiAgbmV4dFBhZ2VUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBgcGFnZUluZm9gIG9iamVjdCBlbmNhcHN1bGF0ZXMgcGFnaW5nIGluZm9ybWF0aW9uIGZvciB0aGUgcmVzdWx0IHNldC5cbiAgICovXG4gIHBhZ2VJbmZvPzoge1xuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgcmVzdWx0cyBpbiB0aGUgcmVzdWx0IHNldC5cbiAgICAgKi9cbiAgICB0b3RhbFJlc3VsdHM/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiByZXN1bHRzIGluY2x1ZGVkIGluIHRoZSBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgcmVzdWx0c1BlclBhZ2U/OiBudW1iZXI7XG4gIH07XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgY29tbWVudHMgdGhhdCBtYXRjaCB0aGUgcmVxdWVzdCBjcml0ZXJpYS5cbiAgICovXG4gIGl0ZW1zPzogTmd4WXRkQXBpQ29tbWVudHNSZXNvdXJjZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5neFl0ZEFwaUNvbW1lbnRzTWFya0FzU3BhbU9wdHMgZXh0ZW5kcyBOZ3hZdGRBcGlTdGFuZGFyZE9wdHMge1xuICAvKipcbiAgICogVGhlIE9BdXRoIDIuMCBhY2Nlc3MgdG9rZW5cbiAgICogTm90ZTogVGhlIGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3lvdXR1YmUuZm9yY2Utc3NsYCBzY29wZSBpcyByZXF1aXJlZCB0byBtYXJrIGEgY29tbWVudCBhcyBzcGFtXG4gICAqL1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICAvKipcbiAgICogU3BlY2lmaWVzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgSURzIG9mIGNvbW1lbnRzIHRoYXQgKGFjY29yZGluZyB0byB0aGUgY2FsbGVyKSBzaG91bGQgYmUgY2xhc3NpZmllZCBhcyBzcGFtXG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudHMvbWFya0FzU3BhbSNpZCBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5neFl0ZEFwaUNvbW1lbnRzU2V0TW9kZXJhdGlvblN0YXR1c09wdHMgZXh0ZW5kcyBOZ3hZdGRBcGlTdGFuZGFyZE9wdHMge1xuICAvKipcbiAgICogVGhlIE9BdXRoIDIuMCBhY2Nlc3MgdG9rZW5cbiAgICogTm90ZTogVGhlIGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3lvdXR1YmUuZm9yY2Utc3NsYCBzY29wZSBpcyByZXF1aXJlZCB0byBzZXQgdGhlIG1vZGVyYXRpb24gc3RhdHVzXG4gICAqL1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICAvKipcbiAgICogU3BlY2lmaWVzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgSURzIHRoYXQgaWRlbnRpZnkgdGhlIGNvbW1lbnRzIHRvIHVwZGF0ZSB0aGVpciBtb2RlcmF0aW9uIHN0YXR1c1xuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRzL3NldE1vZGVyYXRpb25TdGF0dXMjaWQgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgaWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbmV3IG1vZGVyYXRpb24gc3RhdHVzIG9mIHRoZSBzcGVjaWZpZWQgY29tbWVudHNcbiAgICpcbiAgICogQWNjZXB0YWJsZSB2YWx1ZXM6XG4gICAqIC0gYGhlbGRGb3JSZXZpZXdgOiBNYXJrcyBhIGNvbW1lbnQgYXMgYXdhaXRpbmcgcmV2aWV3IGJ5IGEgbW9kZXJhdG9yXG4gICAqIC0gYHB1Ymxpc2hlZGA6IE1hcmtzIGEgY29tbWVudCBhcyBwdWJsaWNcbiAgICogLSBgcmVqZWN0ZWRgOiBSZWplY3RzIGEgY29tbWVudCAoTm90ZTogQWxzbyBoaWRlcyBhbGwgcmVwbGllcyB0byB0aGUgcmVqZWN0ZWQgY29tbWVudClcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cy9zZXRNb2RlcmF0aW9uU3RhdHVzI21vZGVyYXRpb25TdGF0dXMgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgbW9kZXJhdGlvblN0YXR1czogJ2hlbGRGb3JSZXZpZXcnIHwgJ3B1Ymxpc2hlZCcgfCAncmVqZWN0ZWQnO1xuICAvKipcbiAgICogV2hldGhlciB0byBpbmRpY2F0ZSB0aGF0IHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVqZWN0IGFueSBhZGRpdGlvbmFsIGNvbW1lbnRzIHdyaXR0ZW4gYnkgdGhlIGNvbW1lbnQncyBhdXRob3JcbiAgICpcbiAgICogTm90ZTogVGhpcyBwYXJhbWV0ZXIgaXMgb25seSB2YWxpZCBpZiB0aGUgYG1vZGVyYXRpb25TdGF0dXNgIGlzIGFsc28gc2V0IHRvIGByZWplY3RlZGBcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cy9zZXRNb2RlcmF0aW9uU3RhdHVzI2JhbkF1dGhvciBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBiYW5BdXRob3I/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5neFl0ZEFwaUNvbW1lbnRzVXBkYXRlT3B0cyBleHRlbmRzIE5neFl0ZEFwaVN0YW5kYXJkT3B0cyB7XG4gIC8qKlxuICAgKiBUaGUgT0F1dGggMi4wIGFjY2VzcyB0b2tlblxuICAgKiBOb3RlOiBUaGUgYGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgveW91dHViZS5mb3JjZS1zc2xgIHNjb3BlIGlzIHJlcXVpcmVkIHRvIHNldCB0aGUgbW9kZXJhdGlvbiBzdGF0dXNcbiAgICovXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZGVudGlmaWVzIHRoZSBwcm9wZXJ0aWVzIHRoYXQgdGhlIEFQSSByZXNwb25zZSB3aWxsIGluY2x1ZGVcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50cy91cGRhdGUjcGFydCBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBwYXJ0OiBzdHJpbmc7XG59XG4iXX0=