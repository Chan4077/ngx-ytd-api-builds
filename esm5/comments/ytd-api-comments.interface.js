/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function NgxYtdApiCommentsResource() { }
if (false) {
    /**
     * The ID that YouTube uses to uniquely identify the comment.
     *
     * See https://developers.google.com/youtube/v3/docs/comments#id for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsResource.prototype.id;
    /**
     * The snippet object contains basic details about the comment.
     *
     * See https://developers.google.com/youtube/v3/docs/comments#snippet for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsResource.prototype.snippet;
}
/**
 * @record
 */
export function NgxYtdApiCommentsDeleteOpts() { }
if (false) {
    /**
     * The OAuth 2.0 access token
     * Note: The `https://www.googleapis.com/auth/youtube.force-ssl` scope is required to delete a comment
     * @type {?}
     */
    NgxYtdApiCommentsDeleteOpts.prototype.accessToken;
    /**
     * Specifies the comment ID for the resource that is being deleted
     *
     * See https://developers.google.com/youtube/v3/docs/comments/delete#id for more info
     * @type {?}
     */
    NgxYtdApiCommentsDeleteOpts.prototype.id;
}
/**
 * @record
 */
export function NgxYtdApiCommentsInsertOpts() { }
if (false) {
    /**
     * The OAuth 2.0 access token
     * Note: The `https://www.googleapis.com/auth/youtube.force-ssl` scope is required to delete a comment
     * @type {?}
     */
    NgxYtdApiCommentsInsertOpts.prototype.accessToken;
    /**
     * Specifies the properties that the API will include
     *
     * See https://developers.google.com/youtube/v3/docs/comments/insert#part for more info
     * @type {?}
     */
    NgxYtdApiCommentsInsertOpts.prototype.part;
}
/**
 * @record
 */
export function NgxYtdApiCommentsListOpts() { }
if (false) {
    /**
     * Specifies a comma-separated list of comment IDs for the resources that are being retrieved.
     *
     * Note: This parameter is a filter, where only one filter should be specified
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#id for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListOpts.prototype.id;
    /**
     * Specifies the ID of the comment for which replies should be retrieved.
     *
     * Note: This parameter is a filter, where only one filter should be specified
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#parentId for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListOpts.prototype.parentId;
    /**
     * Specifies the maximum number of items that should be returned in the results.
     *
     * Note: This parameter is not supported for use in conjunction with the id parameter.
     * Acceptable values are 1 to 100, inclusive. The default value is 20.
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#maxResults for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListOpts.prototype.maxResults;
    /**
     * Identifies a specific page in the result set that should be returned.
     *
     * Note: This parameter is not supported for use in conjunction with the id parameter.
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#pageToken for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListOpts.prototype.pageToken;
    /**
     * Indicates whether the API should return comments formatted as HTML or as plain text.
     *
     * Acceptable values are:
     * - html – Returns the comments in HTML format. This is the default value.
     * - plainText – Returns the comments in plain text format.
     * See https://developers.google.com/youtube/v3/docs/comments/list#textFormat for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListOpts.prototype.textFormat;
}
/**
 * @deprecated Use {\@link NgxYtdApiCommentListResource}
 * @record
 */
export function NgxYtdApiCommentsListResultItem() { }
/**
 * @record
 */
export function NgxYtdApiCommentsListResult() { }
if (false) {
    /**
     * The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#nextPageToken
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListResult.prototype.nextPageToken;
    /**
     * The `pageInfo` object encapsulates paging information for the result set.
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListResult.prototype.pageInfo;
    /**
     * A list of comments that match the request criteria.
     * @type {?|undefined}
     */
    NgxYtdApiCommentsListResult.prototype.items;
}
/**
 * @record
 */
export function NgxYtdApiCommentsMarkAsSpamOpts() { }
if (false) {
    /**
     * The OAuth 2.0 access token
     * Note: The `https://www.googleapis.com/auth/youtube.force-ssl` scope is required to mark a comment as spam
     * @type {?}
     */
    NgxYtdApiCommentsMarkAsSpamOpts.prototype.accessToken;
    /**
     * Specifies a comma-separated list of IDs of comments that (according to the caller) should be classified as spam
     *
     * See https://developers.google.com/youtube/v3/docs/comments/markAsSpam#id for more info
     * @type {?}
     */
    NgxYtdApiCommentsMarkAsSpamOpts.prototype.id;
}
/**
 * @record
 */
export function NgxYtdApiCommentsSetModerationStatusOpts() { }
if (false) {
    /**
     * The OAuth 2.0 access token
     * Note: The `https://www.googleapis.com/auth/youtube.force-ssl` scope is required to set the moderation status
     * @type {?}
     */
    NgxYtdApiCommentsSetModerationStatusOpts.prototype.accessToken;
    /**
     * Specifies a comma-separated list of IDs that identify the comments to update their moderation status
     *
     * See https://developers.google.com/youtube/v3/docs/comments/setModerationStatus#id for more info
     * @type {?}
     */
    NgxYtdApiCommentsSetModerationStatusOpts.prototype.id;
    /**
     * Specifies the new moderation status of the specified comments
     *
     * Acceptable values:
     * - `heldForReview`: Marks a comment as awaiting review by a moderator
     * - `published`: Marks a comment as public
     * - `rejected`: Rejects a comment (Note: Also hides all replies to the rejected comment)
     *
     * See https://developers.google.com/youtube/v3/docs/comments/setModerationStatus#moderationStatus for more info
     * @type {?}
     */
    NgxYtdApiCommentsSetModerationStatusOpts.prototype.moderationStatus;
    /**
     * Whether to indicate that you want to automatically reject any additional comments written by the comment's author
     *
     * Note: This parameter is only valid if the `moderationStatus` is also set to `rejected`
     *
     * See https://developers.google.com/youtube/v3/docs/comments/setModerationStatus#banAuthor for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentsSetModerationStatusOpts.prototype.banAuthor;
}
/**
 * @record
 */
export function NgxYtdApiCommentsUpdateOpts() { }
if (false) {
    /**
     * The OAuth 2.0 access token
     * Note: The `https://www.googleapis.com/auth/youtube.force-ssl` scope is required to set the moderation status
     * @type {?}
     */
    NgxYtdApiCommentsUpdateOpts.prototype.accessToken;
    /**
     * Identifies the properties that the API response will include
     *
     * See https://developers.google.com/youtube/v3/docs/comments/update#part for more info
     * @type {?}
     */
    NgxYtdApiCommentsUpdateOpts.prototype.part;
}
//# sourceMappingURL=data:application/json;base64,