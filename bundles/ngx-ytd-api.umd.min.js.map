{"version":3,"sources":["ng://ngx-ytd-api/ytd-api.service.ts","ng://ngx-ytd-api/search/ytd-api-search.service.ts","ng://ngx-ytd-api/version.ts"],"names":["NgxYtdApiService","http","this","prototype","searchVideos","query","opts","encodeURI","_apiUrl","ytdApiBaseUrl","apiKey","maxResults","videoEmbeddable","get","search","channelId","Injectable","args","providedIn","HttpClient","NgxYtdApiSearchService","pageToken","VERSION","Version"],"mappings":"8UAAA,IAAAA,EAAA,WAcC,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,qBADI,gDAUxBD,EAAAG,UAAAC,aAAA,SAAaC,EAAeC,GAE3BD,EAAQE,UAAUF,GAClB,IAAIG,EAAaN,KAAKO,cAAa,YAAYJ,EAAK,mCAAmCC,EAAKI,OAS5F,OARIJ,EAAKK,WACRH,GAAW,eAAeF,EAAKK,WAE/BH,GAAW,iBAERF,EAAKM,kBACRJ,GAAW,oBAAoBF,EAAKM,iBAE9BV,KAAKD,KAAKY,IAA2BL,IAS7CR,EAAAG,UAAAW,OAAA,SAAOT,EAAeC,GACrBD,EAAQE,UAAUF,GAClB,IAAIG,EAAaN,KAAKO,cAAa,YAAYJ,EAAK,mCAAmCC,EAAKI,OAS5F,OARIJ,EAAKK,WACRH,GAAW,eAAeF,EAAKK,WAE/BH,GAAW,iBAERF,EAAKS,YACRP,GAAW,cAAcF,EAAKS,WAExBb,KAAKD,KAAKY,IAA2BL,wBAjD7CQ,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,oDALJC,EAAAA,2IAFT,GCAAC,EAAA,WAcC,SAAAA,EAAoBnB,GAAAC,KAAAD,KAAAA,qBADI,gDASxBmB,EAAAjB,UAAAC,aAAA,SAAaC,EAAeC,GAE3BD,EAAQE,UAAUF,GAClB,IAAIG,EAAaN,KAAKO,cAAa,YAAYJ,EAAK,mCAAmCC,EAAKI,OAY5F,OAXIJ,EAAKK,WACRH,GAAW,eAAeF,EAAKK,WAE/BH,GAAW,iBAERF,EAAKM,kBACRJ,GAAW,oBAAoBF,EAAKM,iBAEjCN,EAAKe,YACRb,GAAW,cAAcF,EAAKe,WAExBnB,KAAKD,KAAKY,IAA2BL,IAQ7CY,EAAAjB,UAAAW,OAAA,SAAOT,EAAeC,GACrBD,EAAQE,UAAUF,GAClB,IAAIG,EAAaN,KAAKO,cAAa,YAAYJ,EAAK,mCAAmCC,EAAKI,OAS5F,OARIJ,EAAKK,WACRH,GAAW,eAAeF,EAAKK,WAE/BH,GAAW,iBAERF,EAAKS,YACRP,GAAW,cAAcF,EAAKS,WAExBb,KAAKD,KAAKY,IAA2BL,wBAlD7CQ,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,oDANJC,EAAAA,2IADT,GCEaG,EAAU,IAAIC,EAAAA,QAAQ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nimport { NgxYtdApiSearchResult, NgxYtdApiSearchOpts, NgxYtdApiVideoSearchOpts } from './search/ytd-api-search.interfaces';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class NgxYtdApiService {\n\t/**\n\t * The YouTube base API URL\n\t */\n\tprivate ytdApiBaseUrl = 'https://www.googleapis.com/youtube/v3/';\n\tconstructor(private http: HttpClient) { }\n\n\t/**\n\t * Searches for videos using the YouTube HTTP Data API\n\t * @param query The query to search for\n\t * @param opts Options for YouTube Data API for Videos\n\t * @deprecated Use this method from the `search` submodule\n\t * @returns Results of the search as a stream\n\t*/\n\tsearchVideos(query: string, opts: NgxYtdApiVideoSearchOpts): Observable<NgxYtdApiSearchResult> {\n\t\t// Encode the query\n\t\tquery = encodeURI(query);\n\t\tlet _apiUrl = `${this.ytdApiBaseUrl}search?q=${query}&type=video&part=snippet,id&key=${opts.apiKey}`;\n\t\tif (opts.maxResults) {\n\t\t\t_apiUrl += `&maxResults=${opts.maxResults}`;\n\t\t} else {\n\t\t\t_apiUrl += '&maxResults=50';\n\t\t}\n\t\tif (opts.videoEmbeddable) {\n\t\t\t_apiUrl += `&videoEmbeddable=${opts.videoEmbeddable}`;\n\t\t}\n\t\treturn this.http.get<NgxYtdApiSearchResult>(_apiUrl);\n\t}\n\t/**\n\t * Searches using the YouTube HTTP Data API\n\t * @param query The query to search for\n\t * @param opts\n\t * @deprecated Use this method from the `search` submodule\n\t * @returns Results of the search as a stream\n\t */\n\tsearch(query: string, opts: NgxYtdApiSearchOpts): Observable<NgxYtdApiSearchResult> {\n\t\tquery = encodeURI(query);\n\t\tlet _apiUrl = `${this.ytdApiBaseUrl}search?q=${query}&type=video&part=snippet,id&key=${opts.apiKey}`;\n\t\tif (opts.maxResults) {\n\t\t\t_apiUrl += `&maxResults=${opts.maxResults}`;\n\t\t} else {\n\t\t\t_apiUrl += '&maxResults=50';\n\t\t}\n\t\tif (opts.channelId) {\n\t\t\t_apiUrl += `&channelId=${opts.channelId}`;\n\t\t}\n\t\treturn this.http.get<NgxYtdApiSearchResult>(_apiUrl);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { NgxYtdApiVideoSearchOpts, NgxYtdApiSearchOpts, NgxYtdApiSearchResult } from './ytd-api-search.interfaces';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class NgxYtdApiSearchService {\n\t/**\n\t * The YouTube base API URL\n\t */\n\tprivate ytdApiBaseUrl = 'https://www.googleapis.com/youtube/v3/';\n\tconstructor(private http: HttpClient) { }\n\n\t/**\n\t * Searches for videos using the YouTube HTTP Data API\n\t * @param query The query to search for\n\t * @param opts Options for YouTube Data API for Videos\n\t * @returns Results of the search as a stream\n\t*/\n\tsearchVideos(query: string, opts: NgxYtdApiVideoSearchOpts): Observable<NgxYtdApiSearchResult> {\n\t\t// Encode the query\n\t\tquery = encodeURI(query);\n\t\tlet _apiUrl = `${this.ytdApiBaseUrl}search?q=${query}&type=video&part=snippet,id&key=${opts.apiKey}`;\n\t\tif (opts.maxResults) {\n\t\t\t_apiUrl += `&maxResults=${opts.maxResults}`;\n\t\t} else {\n\t\t\t_apiUrl += '&maxResults=50';\n\t\t}\n\t\tif (opts.videoEmbeddable) {\n\t\t\t_apiUrl += `&videoEmbeddable=${opts.videoEmbeddable}`;\n\t\t}\n\t\tif (opts.pageToken) {\n\t\t\t_apiUrl += `&pageToken=${opts.pageToken}`;\n\t\t}\n\t\treturn this.http.get<NgxYtdApiSearchResult>(_apiUrl);\n\t}\n\t/**\n\t * Searches using the YouTube HTTP Data API\n\t * @param query The query to search for\n\t * @param opts Options for searching\n\t * @returns Results of the search as a stream\n\t */\n\tsearch(query: string, opts: NgxYtdApiSearchOpts): Observable<NgxYtdApiSearchResult> {\n\t\tquery = encodeURI(query);\n\t\tlet _apiUrl = `${this.ytdApiBaseUrl}search?q=${query}&type=video&part=snippet,id&key=${opts.apiKey}`;\n\t\tif (opts.maxResults) {\n\t\t\t_apiUrl += `&maxResults=${opts.maxResults}`;\n\t\t} else {\n\t\t\t_apiUrl += '&maxResults=50';\n\t\t}\n\t\tif (opts.channelId) {\n\t\t\t_apiUrl += `&channelId=${opts.channelId}`;\n\t\t}\n\t\treturn this.http.get<NgxYtdApiSearchResult>(_apiUrl);\n\t}\n}\n","import { Version } from '@angular/core';\n\nexport const VERSION = new Version('1.0.0-alpha.1-ecdaa07-ecdaa07');\n"]}