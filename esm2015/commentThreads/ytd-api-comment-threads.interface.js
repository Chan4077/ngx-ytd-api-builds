//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ytd-api-comment-threads.interface.js","sourceRoot":"ng://ngx-ytd-api/commentThreads/","sources":["ytd-api-comment-threads.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { NgxYtdApiCommentsResource } from 'ngx-ytd-api/comments';\nimport {\n  NgxYtdApiGenericResource,\n  NgxYtdApiStandardParams,\n  NgxYtdApiGenericResponse\n} from 'ngx-ytd-api/common';\n\n/**\n * Represents a resource for the comment thread API\n * @see [Resource representation](https://developers.google.com/youtube/v3/docs/commentThreads#resource)\n */\nexport interface NgxYtdApiCommentThreadsResource extends NgxYtdApiGenericResource {\n  /**\n   * The ID used by YouTube to uniquely identify the comment thread\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#id)\n   */\n  id?: string;\n  /**\n   * Contains basic details about the comment thread\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet)\n   */\n  snippet?: {\n    /**\n     * The YouTube channel that is associated with the comments in the thread\n     *\n     * Notes:\n     * - If the comments are about a video, then the value identifies the channel that uploaded the video\n     * (The `snippet.videoId` property identifies the video)\n     * - If the comments refer to the channel itself, the `snippet.videoId` property will not have a value\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet.channelId)\n     */\n    channelId?: string;\n    /**\n     * The ID of the video that the comments refer to (if any)\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet.videoId)\n     */\n    videoId?: string;\n    /**\n     * The thread's top level comment\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet.topLevelComment)\n     */\n    topLevelComment?: NgxYtdApiCommentsResource;\n    /**\n     * Indicates whether the current viewer can reply to the thread\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet.canReply)\n     */\n    canReply?: boolean;\n    /**\n     * The total number of replies in response to the top level comment\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet.totalReplyCount)\n     */\n    totalReplyCount?: number;\n    /**\n     * Indicates whether the thread and it's contents are visible to all YouTube users\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#snippet.isPublic)\n     */\n    isPublic?: boolean;\n  };\n  /**\n   * A container that contains a list of replies to the comment (if any exist)\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#replies)\n   */\n  replies?: {\n    /**\n     * A list of one or more replies to the top-level comment\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads#replies.comments[])\n     */\n    comments?: NgxYtdApiCommentsResource[];\n  };\n}\n\n/**\n * Represents parameters for the `list` method of the comment thread API\n * @see [Parameters table](https://developers.google.com/youtube/v3/docs/commentThreads/list#parameters)\n */\nexport interface NgxYtdApiCommentThreadsListParams extends NgxYtdApiStandardParams {\n  /**\n   * Instructs the API to return all comment threads associated with the specified channel\n   *\n   * Note: This parameter is a *filter*, where only one *filter* should be specified.\n   *\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#allThreadsRelatedToChannelId)\n   */\n  allThreadsRelatedToChannelId?: string;\n  /**\n   * Instructs the API to return comment threads containing comments about the specified channel\n   *\n   * Note: This parameter is a *filter*, where only one *filter* should be specified.\n   *\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#channelId)\n   */\n  channelId?: string;\n  /**\n   * A comma-separated list of comment thread IDs for the resources that should be retrieved\n   *\n   * Note: This parameter is a *filter*, where only one *filter* should be specified.\n   *\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#id)\n   */\n  id?: string;\n  /**\n   * Instructs the API to return comment threads associated with the specified video ID\n   *\n   * Note: This parameter is a *filter*, where only one *filter* should be specified.\n   *\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#videoId)\n   *\n   */\n  videoId?: string;\n  /**\n   * Specifies the maximum number of items that should be returned\n   * - Accepted values: a number between `1` to `100`\n   * - Default value: `20`\n   *\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#maxResults)\n   */\n  maxResults?: number;\n  /**\n   * Limits the returned comment threads to a specified moderation state.\n   * - Accepted values:\n   *   - `heldForReview` - Retrieve comment threads that are awaiting review by a moderator\n   *   - `likelySpam` - Retrieve comment threads classified as likely to be spam\n   *   - `published` - Retrieve threads of published comments\n   * - Default value: `published`\n   * - Note: This parameter is not supported with the `id` parameter\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#moderationStatus)\n   */\n  moderationStatus?: 'heldForReview' | 'likelySpam' | 'published';\n  /**\n   * Specifies the order in which the API should list comment threads\n   * - Accepted values:\n   *   - `time` - Comment threads are ordered by time\n   *   - `relevance` - Comment threads are ordered by relevance\n   * - Default value: `time`\n   * - Note: This parameter is not supported with the `id` parameter\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#order)\n   */\n  order?: 'time' | 'relevance';\n  /**\n   * Specifies the page that should be returned in the result set\n   *\n   * Note: This parameter is not supported with the `id` parameter\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#pageToken)\n   */\n  pageToken?: string;\n  /**\n   * Returns comments that contain the specified search terms\n   *\n   * Note: This parameter is not supported with the `id` parameter\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#searchTerms)\n   */\n  searchTerms?: string;\n  /**\n   * Sets the text format to return the comments in\n   * - Accepted values:\n   *   - `html` - Returns the comments in HTML\n   *   - `plainText` - Returns the comments in plain text format\n   * - Default value: `html`\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#textFormat)\n   */\n  textFormat?: 'html' | 'plainText';\n}\n\n/** @deprecated Use {@link NgxYtdApiCommentThreadsListParams} */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiCommentThreadsListOpts extends NgxYtdApiCommentThreadsListParams { }\n\n/**\n * Represents the response which is returned when the `list` method of the comment thread API is called\n * @see [Response structure](https://developers.google.com/youtube/v3/docs/commentThreads/list#response)\n */\nexport interface NgxYtdApiCommentThreadsListResponse extends NgxYtdApiGenericResponse {\n  /**\n   * The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the list of results\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#nextPageToken)\n   */\n  nextPageToken?: string;\n  /**\n   * Contains paging information for the list of results\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#pageInfo)\n   */\n  pageInfo?: {\n    /**\n     * The total number of results in the list of results\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#pageInfo.totalResults)\n     */\n    totalResults?: number;\n    /**\n     * The number of results included in the API response\n     * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#pageInfo.resultsPerPage)\n     */\n    resultsPerPage?: number;\n  };\n  /**\n   * A list of comment threads that match the request criteria\n   * @see [Developer docs](https://developers.google.com/youtube/v3/docs/commentThreads/list#items[])\n   */\n  items?: NgxYtdApiCommentThreadsResource[];\n}\n\n/**\n * Represents methods for the `insert` method of the comment thread API\n * @see [Parameters table](https://developers.google.com/youtube/v3/docs/commentThreads/insert#parameters)\n */\nexport interface NgxYtdApiCommentThreadsInsertParams extends NgxYtdApiStandardParams {\n  /**\n   * Represents the properties that should be included in the response\n   * @see [Parameter info](https://developers.google.com/youtube/v3/docs/commentThreads/insert#part)\n   */\n  part: string;\n}\n\n/** @deprecated Use {@link NgxYtdApiCommentThreadsInsertOpts} */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiCommentThreadsInsertOpts extends NgxYtdApiCommentThreadsInsertParams { }\n\n/**\n * Represents methods for the `update` method of the comment thread API\n * @see [Parameters table](https://developers.google.com/youtube/v3/docs/commentThreads/insert#parameters)\n */\nexport interface NgxYtdApiCommentThreadsUpdateParams extends NgxYtdApiStandardParams {\n  /**\n   * Represents the properties that should be included in the response\n   * @see [Parameter info](https://developers.google.com/youtube/v3/docs/commentThreads/insert#part)\n   */\n  part: string;\n}\n"]}