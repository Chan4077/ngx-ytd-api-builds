import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgxYtdApiCommonService } from 'ngx-ytd-api/common';
var NgxYtdApiCommentThreadsService = /** @class */ (function () {
    function NgxYtdApiCommentThreadsService(common) {
        this.common = common;
        this.ngxYtdApiCommentThreadsApiUrl = 'https://www.googleapis.com/youtube/v3/commentThreads';
    }
    /**
     * Returns a list of comment threads that match the API request parameters
     * @see [CommentThreads: list](https://developers.google.com/youtube/v3/docs/commentThreads/list)
     * @see [Parameters table](https://developers.google.com/youtube/v3/docs/commentThreads/list#parameters)
     * @see [Response body](https://developers.google.com/youtube/v3/docs/commentThreads/list#response)
     * @see [Examples](https://developers.google.com/youtube/v3/docs/commentThreads/list#examples)
     * @param params Query parameters to be appended to the API endpoint
     * @returns Results of the list as an `Observable`
     */
    NgxYtdApiCommentThreadsService.prototype.list = function (params) {
        return this.common.sendHttpRequest(this.ngxYtdApiCommentThreadsApiUrl, this.common.mergeParamsWithStandardParams(params), null, 'get');
    };
    /**
     * Creates a new top-level comment
     * @see [CommentThreads: insert](https://developers.google.com/youtube/v3/docs/commentThreads/insert)
     * @see [Parameters table](https://developers.google.com/youtube/v3/docs/commentThreads/insert#parameters)
     * @see [Response body](https://developers.google.com/youtube/v3/docs/commentThreads/insert#response)
     * @see [Request body](https://developers.google.com/youtube/v3/docs/commentThreads/insert#request-body)
     * @see [API Explorer demo](https://developers.google.com/youtube/v3/docs/commentThreads/insert?apix=true)
     * @param body The top-level comment to create
     * (See [request body](https://developers.google.com/youtube/v3/docs/commentThreads/insert#request-body) for more info)
     * @param params Parameters for the API
     * @returns The created comment thread
     */
    NgxYtdApiCommentThreadsService.prototype.insert = function (body, params) {
        return this.common.sendHttpRequest(this.ngxYtdApiCommentThreadsApiUrl, this.common.mergeParamsWithStandardParams(params), body, 'post');
    };
    /**
     * Modifies the top-level comment in a comment thread
     * @see [CommentThreads: update](https://developers.google.com/youtube/v3/docs/commentThreads/update)
     * @see [Parameters table](https://developers.google.com/youtube/v3/docs/commentThreads/update#parameters)
     * @see [Response body](https://developers.google.com/youtube/v3/docs/commentThreads/update#response)
     * @see [Request body](https://developers.google.com/youtube/v3/docs/commentThreads/update#request-body)
     * @see [API Explorer demo](https://developers.google.com/youtube/v3/docs/commentThreads/update?apix=true)
     * @param body A modified version of the top-level comment
     * @param params Parameters for the API
     * @returns The updated top-level comment
     */
    NgxYtdApiCommentThreadsService.prototype.update = function (body, params) {
        return this.common.sendHttpRequest(this.ngxYtdApiCommentThreadsApiUrl, this.common.mergeParamsWithStandardParams(params), body, 'put');
    };
    NgxYtdApiCommentThreadsService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [NgxYtdApiCommonService])
    ], NgxYtdApiCommentThreadsService);
    return NgxYtdApiCommentThreadsService;
}());
export { NgxYtdApiCommentThreadsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieXRkLWFwaS1jb21tZW50LXRocmVhZHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC15dGQtYXBpL2NvbW1lbnRUaHJlYWRzLyIsInNvdXJjZXMiOlsieXRkLWFwaS1jb21tZW50LXRocmVhZHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQVc1RDtJQUNFLHdDQUFvQixNQUE4QjtRQUE5QixXQUFNLEdBQU4sTUFBTSxDQUF3QjtRQUV6QyxrQ0FBNkIsR0FBRyxzREFBc0QsQ0FBQztJQUYxQyxDQUFDO0lBR3ZEOzs7Ozs7OztPQVFHO0lBQ0gsNkNBQUksR0FBSixVQUFLLE1BQXlDO1FBQzVDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQ2hDLElBQUksQ0FBQyw2QkFBNkIsRUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBb0MsTUFBTSxDQUFDLEVBQ3BGLElBQUksRUFDSixLQUFLLENBQ04sQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7T0FXRztJQUNILCtDQUFNLEdBQU4sVUFBTyxJQUFxQyxFQUFFLE1BQTJDO1FBQ3ZGLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBSWhDLElBQUksQ0FBQyw2QkFBNkIsRUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBc0MsTUFBTSxDQUFDLEVBQ3RGLElBQUksRUFDSixNQUFNLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0wsK0NBQU0sR0FBTixVQUFPLElBQXFDLEVBQUUsTUFBMkM7UUFDdkYsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FLaEMsSUFBSSxDQUFDLDZCQUE2QixFQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxFQUNqRCxJQUFJLEVBQ0osS0FBSyxDQUNOLENBQUM7SUFDSixDQUFDO0lBcEVVLDhCQUE4QjtRQUQxQyxVQUFVLEVBQUU7aURBRWlCLHNCQUFzQjtPQUR2Qyw4QkFBOEIsQ0FxRTFDO0lBQUQscUNBQUM7Q0FBQSxBQXJFRCxJQXFFQztTQXJFWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hZdGRBcGlDb21tb25TZXJ2aWNlIH0gZnJvbSAnbmd4LXl0ZC1hcGkvY29tbW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzSW5zZXJ0UGFyYW1zLFxuICBOZ3hZdGRBcGlDb21tZW50VGhyZWFkc0xpc3RQYXJhbXMsXG4gIE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzTGlzdFJlc3BvbnNlLFxuICBOZ3hZdGRBcGlDb21tZW50VGhyZWFkc1Jlc291cmNlLFxuICBOZ3hZdGRBcGlDb21tZW50VGhyZWFkc1VwZGF0ZVBhcmFtc1xufSBmcm9tICcuL3l0ZC1hcGktY29tbWVudC10aHJlYWRzLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hZdGRBcGlDb21tZW50VGhyZWFkc1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbW1vbjogTmd4WXRkQXBpQ29tbW9uU2VydmljZSkgeyB9XG5cbiAgcmVhZG9ubHkgbmd4WXRkQXBpQ29tbWVudFRocmVhZHNBcGlVcmwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My9jb21tZW50VGhyZWFkcyc7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBjb21tZW50IHRocmVhZHMgdGhhdCBtYXRjaCB0aGUgQVBJIHJlcXVlc3QgcGFyYW1ldGVyc1xuICAgKiBAc2VlIFtDb21tZW50VGhyZWFkczogbGlzdF0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRUaHJlYWRzL2xpc3QpXG4gICAqIEBzZWUgW1BhcmFtZXRlcnMgdGFibGVdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50VGhyZWFkcy9saXN0I3BhcmFtZXRlcnMpXG4gICAqIEBzZWUgW1Jlc3BvbnNlIGJvZHldKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50VGhyZWFkcy9saXN0I3Jlc3BvbnNlKVxuICAgKiBAc2VlIFtFeGFtcGxlc10oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRUaHJlYWRzL2xpc3QjZXhhbXBsZXMpXG4gICAqIEBwYXJhbSBwYXJhbXMgUXVlcnkgcGFyYW1ldGVycyB0byBiZSBhcHBlbmRlZCB0byB0aGUgQVBJIGVuZHBvaW50XG4gICAqIEByZXR1cm5zIFJlc3VsdHMgb2YgdGhlIGxpc3QgYXMgYW4gYE9ic2VydmFibGVgXG4gICAqL1xuICBsaXN0KHBhcmFtczogTmd4WXRkQXBpQ29tbWVudFRocmVhZHNMaXN0UGFyYW1zKTogT2JzZXJ2YWJsZTxOZ3hZdGRBcGlDb21tZW50VGhyZWFkc0xpc3RSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmNvbW1vbi5zZW5kSHR0cFJlcXVlc3Q8bnVsbCwgTmd4WXRkQXBpQ29tbWVudFRocmVhZHNMaXN0UGFyYW1zLCBOZ3hZdGRBcGlDb21tZW50VGhyZWFkc0xpc3RSZXNwb25zZT4oXG4gICAgICB0aGlzLm5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzQXBpVXJsLFxuICAgICAgdGhpcy5jb21tb24ubWVyZ2VQYXJhbXNXaXRoU3RhbmRhcmRQYXJhbXM8Tmd4WXRkQXBpQ29tbWVudFRocmVhZHNMaXN0UGFyYW1zPihwYXJhbXMpLFxuICAgICAgbnVsbCxcbiAgICAgICdnZXQnXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHRvcC1sZXZlbCBjb21tZW50XG4gICAqIEBzZWUgW0NvbW1lbnRUaHJlYWRzOiBpbnNlcnRdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50VGhyZWFkcy9pbnNlcnQpXG4gICAqIEBzZWUgW1BhcmFtZXRlcnMgdGFibGVdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50VGhyZWFkcy9pbnNlcnQjcGFyYW1ldGVycylcbiAgICogQHNlZSBbUmVzcG9uc2UgYm9keV0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRUaHJlYWRzL2luc2VydCNyZXNwb25zZSlcbiAgICogQHNlZSBbUmVxdWVzdCBib2R5XShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudFRocmVhZHMvaW5zZXJ0I3JlcXVlc3QtYm9keSlcbiAgICogQHNlZSBbQVBJIEV4cGxvcmVyIGRlbW9dKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50VGhyZWFkcy9pbnNlcnQ/YXBpeD10cnVlKVxuICAgKiBAcGFyYW0gYm9keSBUaGUgdG9wLWxldmVsIGNvbW1lbnQgdG8gY3JlYXRlXG4gICAqIChTZWUgW3JlcXVlc3QgYm9keV0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRUaHJlYWRzL2luc2VydCNyZXF1ZXN0LWJvZHkpIGZvciBtb3JlIGluZm8pXG4gICAqIEBwYXJhbSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgdGhlIEFQSVxuICAgKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBjb21tZW50IHRocmVhZFxuICAgKi9cbiAgaW5zZXJ0KGJvZHk6IE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzUmVzb3VyY2UsIHBhcmFtczogTmd4WXRkQXBpQ29tbWVudFRocmVhZHNJbnNlcnRQYXJhbXMpOiBPYnNlcnZhYmxlPE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzUmVzb3VyY2U+IHtcbiAgICByZXR1cm4gdGhpcy5jb21tb24uc2VuZEh0dHBSZXF1ZXN0PFxuICAgIE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzUmVzb3VyY2UsXG4gICAgTmd4WXRkQXBpQ29tbWVudFRocmVhZHNJbnNlcnRQYXJhbXMsXG4gICAgTmd4WXRkQXBpQ29tbWVudFRocmVhZHNSZXNvdXJjZT4oXG4gICAgICB0aGlzLm5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzQXBpVXJsLFxuICAgICAgdGhpcy5jb21tb24ubWVyZ2VQYXJhbXNXaXRoU3RhbmRhcmRQYXJhbXM8Tmd4WXRkQXBpQ29tbWVudFRocmVhZHNJbnNlcnRQYXJhbXM+KHBhcmFtcyksXG4gICAgICBib2R5LFxuICAgICAgJ3Bvc3QnXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vZGlmaWVzIHRoZSB0b3AtbGV2ZWwgY29tbWVudCBpbiBhIGNvbW1lbnQgdGhyZWFkXG4gICAgICogQHNlZSBbQ29tbWVudFRocmVhZHM6IHVwZGF0ZV0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRUaHJlYWRzL3VwZGF0ZSlcbiAgICAgKiBAc2VlIFtQYXJhbWV0ZXJzIHRhYmxlXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudFRocmVhZHMvdXBkYXRlI3BhcmFtZXRlcnMpXG4gICAgICogQHNlZSBbUmVzcG9uc2UgYm9keV0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92My9kb2NzL2NvbW1lbnRUaHJlYWRzL3VwZGF0ZSNyZXNwb25zZSlcbiAgICAgKiBAc2VlIFtSZXF1ZXN0IGJvZHldKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvdjMvZG9jcy9jb21tZW50VGhyZWFkcy91cGRhdGUjcmVxdWVzdC1ib2R5KVxuICAgICAqIEBzZWUgW0FQSSBFeHBsb3JlciBkZW1vXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL3YzL2RvY3MvY29tbWVudFRocmVhZHMvdXBkYXRlP2FwaXg9dHJ1ZSlcbiAgICAgKiBAcGFyYW0gYm9keSBBIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIHRvcC1sZXZlbCBjb21tZW50XG4gICAgICogQHBhcmFtIHBhcmFtcyBQYXJhbWV0ZXJzIGZvciB0aGUgQVBJXG4gICAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgdG9wLWxldmVsIGNvbW1lbnRcbiAgICAgKi9cbiAgdXBkYXRlKGJvZHk6IE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzUmVzb3VyY2UsIHBhcmFtczogTmd4WXRkQXBpQ29tbWVudFRocmVhZHNVcGRhdGVQYXJhbXMpOiBPYnNlcnZhYmxlPE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzUmVzb3VyY2U+IHtcbiAgICByZXR1cm4gdGhpcy5jb21tb24uc2VuZEh0dHBSZXF1ZXN0PFxuICAgICAgTmd4WXRkQXBpQ29tbWVudFRocmVhZHNSZXNvdXJjZSxcbiAgICAgIE5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzVXBkYXRlUGFyYW1zLFxuICAgICAgTmd4WXRkQXBpQ29tbWVudFRocmVhZHNSZXNvdXJjZVxuICAgID4oXG4gICAgICB0aGlzLm5neFl0ZEFwaUNvbW1lbnRUaHJlYWRzQXBpVXJsLFxuICAgICAgdGhpcy5jb21tb24ubWVyZ2VQYXJhbXNXaXRoU3RhbmRhcmRQYXJhbXMocGFyYW1zKSxcbiAgICAgIGJvZHksXG4gICAgICAncHV0J1xuICAgICk7XG4gIH1cbn1cbiJdfQ==