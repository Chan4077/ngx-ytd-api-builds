/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function NgxYtdApiCommentListOpts() { }
if (false) {
    /**
     * Specifies a comma-separated list of comment IDs for the resources that are being retrieved.
     *
     * Note: This parameter is a filter, where only one filter should be specified
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#id for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentListOpts.prototype.id;
    /**
     * Specifies the ID of the comment for which replies should be retrieved.
     *
     * Note: This parameter is a filter, where only one filter should be specified
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#parentId for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentListOpts.prototype.parentId;
    /**
     * Specifies the maximum number of items that should be returned in the results.
     *
     * Note: This parameter is not supported for use in conjunction with the id parameter.
     * Acceptable values are 1 to 100, inclusive. The default value is 20.
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#maxResults for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentListOpts.prototype.maxResults;
    /**
     * Identifies a specific page in the result set that should be returned.
     *
     * Note: This parameter is not supported for use in conjunction with the id parameter.
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#pageToken for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentListOpts.prototype.pageToken;
    /**
     * Indicates whether the API should return comments formatted as HTML or as plain text.
     *
     * Acceptable values are:
     * - html – Returns the comments in HTML format. This is the default value.
     * - plainText – Returns the comments in plain text format.
     * See https://developers.google.com/youtube/v3/docs/comments/list#textFormat for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentListOpts.prototype.textFormat;
}
/**
 * @record
 */
export function NgxYtdApiCommentResource() { }
if (false) {
    /**
     * The ID that YouTube uses to uniquely identify the comment.
     *
     * See https://developers.google.com/youtube/v3/docs/comments#id for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentResource.prototype.id;
    /**
     * The snippet object contains basic details about the comment.
     *
     * See https://developers.google.com/youtube/v3/docs/comments#snippet for more info
     * @type {?|undefined}
     */
    NgxYtdApiCommentResource.prototype.snippet;
}
/**
 * @deprecated Use {\@link NgxYtdApiCommentListResource}
 * @record
 */
export function NgxYtdApiCommentListResultItem() { }
/**
 * @record
 */
export function NgxYtdApiCommentListResult() { }
if (false) {
    /**
     * The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.
     *
     * See https://developers.google.com/youtube/v3/docs/comments/list#nextPageToken
     * @type {?|undefined}
     */
    NgxYtdApiCommentListResult.prototype.nextPageToken;
    /**
     * The `pageInfo` object encapsulates paging information for the result set.
     * @type {?|undefined}
     */
    NgxYtdApiCommentListResult.prototype.pageInfo;
    /**
     * A list of comments that match the request criteria.
     * @type {?|undefined}
     */
    NgxYtdApiCommentListResult.prototype.items;
}
//# sourceMappingURL=data:application/json;base64,