{"version":3,"sources":["ng://ngx-ytd-api/comments/ytd-api-comments.service.ts","ng://ngx-ytd-api/comments/ytd-api-comments.module.ts"],"names":["NgxYtdApiCommentsService","http","this","ngxYtdCommentsApiUrl","prototype","_httpHandler","apiEndpoint","opts","body","httpType","headers","undefined","HttpHeaders","set","createHttpDelete","createHttpGet","createHttpPost","createHttpPut","delete","insert","list","markAsSpam","setModerationStatus","update","Injectable","args","providedIn","SimpleHttpService","NgxYtdApiCommentsModule","NgModule","imports","SimpleHttpModule","providers"],"mappings":"4bAAA,IAAAA,EAAA,WAmBE,SAAAA,EACUC,GAAAC,KAAAD,KAAAA,EAKDC,KAAAC,qBAAuB,wDAExBH,EAAAI,UAAAC,aAAR,SACEC,EACAC,EACAC,EACAC,OAEIC,EAKJ,YARA,IAAAF,IAAAA,EAAA,MAII,gBAAiBD,UAAeA,EAAkB,cAAMI,WAAqC,OAAxBJ,EAAkB,cACzFG,GAAU,IAAIE,EAAAA,aACXC,IAAI,gBAAiB,UAAUN,EAAkB,cAE9CE,GACN,IAAK,SACH,OAAIC,EACKR,KAAKD,KAAKa,iBAAuBR,EAAaC,EAAMG,GAEpDR,KAAKD,KAAKa,iBAAuBR,EAAaC,GAEzD,IAAK,MACH,OAAIG,EACKR,KAAKD,KAAKc,cAAoBT,EAAaC,EAAMG,GAEjDR,KAAKD,KAAKc,cAAoBT,EAAaC,GAEtD,IAAK,OACH,OAAIG,EACEF,EACKN,KAAKD,KAAKe,eAAwBV,EAAaC,EAAMC,EAAME,GAE3DR,KAAKD,KAAKe,eAAwBV,EAAaC,EAAM,KAAMG,GAGhEF,EACKN,KAAKD,KAAKe,eAAwBV,EAAaC,EAAMC,GAErDN,KAAKD,KAAKe,eAAwBV,EAAaC,EAAM,MAGlE,IAAK,MACH,OAAIG,EACEF,EACKN,KAAKD,KAAKgB,cAAuBX,EAAaC,EAAMC,EAAME,GAE1DR,KAAKD,KAAKgB,cAAuBX,EAAaC,EAAM,KAAMG,GAG/DF,EACKN,KAAKD,KAAKgB,cAAuBX,EAAaC,EAAMC,GAEpDN,KAAKD,KAAKgB,cAAuBX,EAAaC,EAAM,QAYrEP,EAAAI,UAAAc,UAAA,SAAOX,GACL,OAAOL,KAAKG,aACVH,KAAKC,qBACLI,EACA,KACA,WAWJP,EAAAI,UAAAe,OAAA,SAAOX,EAAiCD,GACtC,OAAOL,KAAKG,aACVH,KAAKC,qBACLI,EACAC,EACA,SAUJR,EAAAI,UAAAgB,KAAA,SAAKb,GACH,OAAOL,KAAKG,aACVH,KAAKC,qBACLI,EACA,KACA,QAUJP,EAAAI,UAAAiB,WAAA,SAAWd,GACT,OAAOL,KAAKG,aACPH,KAAKC,qBAAoB,cAC5BI,EACA,KACA,SAUJP,EAAAI,UAAAkB,oBAAA,SAAoBf,GAClB,OAAOL,KAAKG,aACPH,KAAKC,qBAAoB,uBAC5BI,EACA,KACA,SAWJP,EAAAI,UAAAmB,OAAA,SAAOf,EAAiCD,GACtC,OAAOL,KAAKG,aACVH,KAAKC,qBACLI,EACAC,EACA,4BA3JLgB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAfLC,EAAAA,yJADT,GCAAC,EAAA,WAIA,SAAAA,KAQuC,2BARtCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CACPC,EAAAA,kBAEFC,UAAW,CACThC,OAGmC4B,EAZvC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SimpleHttpService } from 'ngx-simple-http';\nimport { Observable } from 'rxjs';\nimport {\n  NgxYtdApiCommentsDeleteOpts,\n  NgxYtdApiCommentsInsertOpts,\n  NgxYtdApiCommentsListOpts,\n  NgxYtdApiCommentsListResult,\n  NgxYtdApiCommentsMarkAsSpamOpts,\n  NgxYtdApiCommentsResource,\n  NgxYtdApiCommentsSetModerationStatusOpts,\n  NgxYtdApiCommentsUpdateOpts\n} from './ytd-api-comments.interface';\nimport { HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxYtdApiCommentsService {\n  constructor(\n    private http: SimpleHttpService\n  ) { }\n  /**\n   * The API URL for the Comments API of the YouTube Data v3 API\n   */\n  readonly ngxYtdCommentsApiUrl = 'https://www.googleapis.com/youtube/v3/comments';\n  // Handler for HTTP requests\n  private _httpHandler<B extends any, P extends any, R extends any>(\n    apiEndpoint: string,\n    opts: P,\n    body: B = null,\n    httpType: 'delete' | 'get' | 'post' | 'put'\n  ): Observable<R> {\n    let headers: HttpHeaders;\n    if ('accessToken' in opts && typeof opts['accessToken'] !== undefined && opts['accessToken'] !== null) {\n      headers = new HttpHeaders()\n        .set('Authorization', `Bearer ${opts['accessToken']}`);\n    }\n    switch (httpType) {\n      case 'delete':\n        if (headers) {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts);\n        }\n      case 'get':\n        if (headers) {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts);\n        }\n      case 'post':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n      case 'put':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n    }\n  }\n  /**\n   * Deletes a comment\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/delete for more info\n   * @param opts Options for the API\n   * @return Results of the deletion as an `Observable`\n   */\n  delete(opts: NgxYtdApiCommentsDeleteOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiCommentsDeleteOpts, any>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      null,\n      'delete'\n    );\n  }\n  /**\n   * Creates a reply to an existing comment\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/insert for more info\n   * @param body The API body\n   * @param opts Options for the API\n   * @return Results of the creation as an `Observable`\n   */\n  insert(body: NgxYtdApiCommentsResource, opts: NgxYtdApiCommentsInsertOpts): Observable<any> {\n    return this._httpHandler<NgxYtdApiCommentsResource, NgxYtdApiCommentsInsertOpts, any>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      body,\n      'post'\n    );\n  }\n  /**\n   * Retrieves comments\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/list for more info\n   * @param opts Options for the API\n   * @return Results of the request as an `Observable`\n   */\n  list(opts: NgxYtdApiCommentsListOpts): Observable<NgxYtdApiCommentsListResult> {\n    return this._httpHandler<any, NgxYtdApiCommentsListOpts, NgxYtdApiCommentsListResult>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      null,\n      'get'\n    );\n  }\n  /**\n   * Flags one or more comments as spam\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/markAsSpam for more info\n   * @param opts Options for the API\n   * @return Results of the request as an `Observable`\n   */\n  markAsSpam(opts: NgxYtdApiCommentsMarkAsSpamOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiCommentsMarkAsSpamOpts, any>(\n      `${this.ngxYtdCommentsApiUrl}/markAsSpam`,\n      opts,\n      null,\n      'post'\n    );\n  }\n  /**\n   * Sets the moderation status of one or more comments\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/setModerationStatus for more info\n   * @param opts Options for the API\n   * @return Results of the request as an `Observable`\n   */\n  setModerationStatus(opts: NgxYtdApiCommentsSetModerationStatusOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiCommentsSetModerationStatusOpts, any>(\n      `${this.ngxYtdCommentsApiUrl}/setModerationStatus`,\n      opts,\n      null,\n      'post'\n    );\n  }\n  /**\n   * Modifies a comment\n   *\n   * See https://developers.google.com/youtube/v3/docs/comments/update for more info\n   * @param body The API body\n   * @param opts Options for the API\n   * @return Results of the update as an `Observable`\n   */\n  update(body: NgxYtdApiCommentsResource, opts: NgxYtdApiCommentsUpdateOpts): Observable<NgxYtdApiCommentsResource> {\n    return this._httpHandler<NgxYtdApiCommentsResource, NgxYtdApiCommentsUpdateOpts, NgxYtdApiCommentsResource>(\n      this.ngxYtdCommentsApiUrl,\n      opts,\n      body,\n      'put'\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleHttpModule } from 'ngx-simple-http';\nimport { NgxYtdApiCommentsService } from './ytd-api-comments.service';\n\n@NgModule({\n  imports: [\n    SimpleHttpModule\n  ],\n  providers: [\n    NgxYtdApiCommentsService\n  ]\n})\nexport class NgxYtdApiCommentsModule { }\n"]}