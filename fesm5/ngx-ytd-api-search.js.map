{"version":3,"file":"ngx-ytd-api-search.js.map","sources":["ng://ngx-ytd-api/search/ytd-api-search.service.ts","ng://ngx-ytd-api/search/ytd-api-search.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { NgxYtdApiSearchListOpts, NgxYtdApiSearchListResult } from './ytd-api-search.interfaces';\nimport { SimpleHttpService } from 'ngx-simple-http';\n\n@Injectable()\nexport class NgxYtdApiSearchService {\n  constructor(\n    private http: SimpleHttpService\n  ) { }\n  /**\n   * The API URL for the Search API of the YouTube Data v3 API\n   */\n  readonly ngxYtdSearchApiUrl = 'https://www.googleapis.com/youtube/v3/search';\n  // Handler for HTTP requests\n  private _httpHandler<B extends any, P extends any, R extends any>(\n    apiEndpoint: string,\n    opts: P,\n    body: B = null,\n    httpType: 'delete' | 'get' | 'post' | 'put'\n  ): Observable<R> {\n    let headers: HttpHeaders;\n    if ('accessToken' in opts && typeof opts['accessToken'] !== undefined && opts['accessToken'] !== null) {\n      headers = new HttpHeaders()\n        .set('Authorization', `Bearer ${opts['accessToken']}`);\n    }\n    switch (httpType) {\n      case 'delete':\n        if (headers) {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts);\n        }\n      case 'get':\n        if (headers) {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts);\n        }\n      case 'post':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n      case 'put':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n    }\n  }\n  /**\n   * Returns a collection of search results that match the query parameters specified\n   *\n   * See https://developers.google.com/youtube/v3/docs/search/list for more info\n   * @param opts API parameters for the API\n   * @return Results of the search has an `Observable`\n   */\n  list(opts: NgxYtdApiSearchListOpts): Observable<NgxYtdApiSearchListResult> {\n    return this._httpHandler<any, NgxYtdApiSearchListOpts, NgxYtdApiSearchListResult>(\n      this.ngxYtdSearchApiUrl,\n      opts,\n      null,\n      'get'\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleHttpModule } from 'ngx-simple-http';\nimport { NgxYtdApiSearchService } from './ytd-api-search.service';\n\n@NgModule({\n  imports: [\n    SimpleHttpModule\n  ],\n  providers: [\n    NgxYtdApiSearchService\n  ]\n})\nexport class NgxYtdApiSearchModule { }\n"],"names":[],"mappings":"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"}
