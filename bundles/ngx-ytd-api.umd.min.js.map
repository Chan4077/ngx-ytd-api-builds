{"version":3,"sources":["ng://ngx-ytd-api/ytd-api.service.ts","ng://ngx-ytd-api/search/ytd-api-search.service.ts","ng://ngx-ytd-api/version.ts"],"names":["NgxYtdApiService","http","this","prototype","search","query","opts","encodeURI","_apiUrl","ytdApiBaseUrl","prop","hasOwnProperty","get","Injectable","args","providedIn","HttpClient","NgxYtdApiSearchService","VERSION","Version"],"mappings":"8UAAA,IAAAA,EAAA,WAcC,SAAAA,EACSC,GAAAC,KAAAD,KAAAA,qBAFe,gDAWxBD,EAAAG,UAAAC,OAAA,SAAOC,EAAeC,GACrBD,EAAQE,UAAUF,GAClB,IAAIG,EAAaN,KAAKO,cAAa,YAAYJ,EAAK,mBAEpD,IAAK,IAAMK,KAAQJ,EAEdA,EAAKK,eAAeD,IAAwB,OAAfJ,EAAKI,KAErCF,GAAW,IAAIE,EAAI,IAAIH,UAAUD,EAAKI,KAGxC,OAAOR,KAAKD,KAAKW,IAA2BJ,wBA7B7CK,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,oDALJC,EAAAA,2IAFT,GCAAC,EAAA,WAcC,SAAAA,EAAoBhB,GAAAC,KAAAD,KAAAA,qBADI,gDASxBgB,EAAAd,UAAAC,OAAA,SAAOC,EAAeC,GACrBD,EAAQE,UAAUF,GAClB,IAAIG,EAAaN,KAAKO,cAAa,YAAYJ,EAAK,mBAEpD,IAAK,IAAMK,KAAQJ,EAEdA,EAAKK,eAAeD,IAAwB,OAAfJ,EAAKI,KAErCF,GAAW,IAAIE,EAAI,IAAIH,UAAUD,EAAKI,KAGxC,OAAOR,KAAKD,KAAKW,IAA2BJ,wBA3B7CK,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,oDANJC,EAAAA,2IADT,GCEaE,EAAU,IAAIC,EAAAA,QAAQ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nimport { NgxYtdApiSearchResult, NgxYtdApiSearchOpts } from './search/ytd-api-search.interfaces';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class NgxYtdApiService {\n\t/**\n\t * The YouTube base API URL\n\t */\n\tprivate ytdApiBaseUrl = 'https://www.googleapis.com/youtube/v3/';\n\tconstructor(\n\t\tprivate http: HttpClient\n\t) { }\n\t/**\n\t * Searches using the YouTube HTTP Data API\n\t * @param query The query to search for. See the {@link https://developers.google.com/youtube/v3/docs/search/list#q|developer docs}\n\t * for more info.\n\t * @param opts Options for searching\n\t * @returns Results of the search as a stream\n\t */\n\tsearch(query: string, opts: NgxYtdApiSearchOpts): Observable<NgxYtdApiSearchResult> {\n\t\tquery = encodeURI(query);\n\t\tlet _apiUrl = `${this.ytdApiBaseUrl}search?q=${query}&part=snippet,id`;\n\t\t// Loop through every property in the opts object\n\t\tfor (const prop in opts) {\n\t\t\t// Check if property has a non-null value\n\t\t\tif (opts.hasOwnProperty(prop) && opts[prop] !== null) {\n\t\t\t\t// Add parameter to the API URL\n\t\t\t\t_apiUrl += `&${prop}=${encodeURI(opts[prop])}`;\n\t\t\t}\n\t\t}\n\t\treturn this.http.get<NgxYtdApiSearchResult>(_apiUrl);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { NgxYtdApiSearchOpts, NgxYtdApiSearchResult } from './ytd-api-search.interfaces';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class NgxYtdApiSearchService {\n\t/**\n\t * The YouTube base API URL\n\t */\n\tprivate ytdApiBaseUrl = 'https://www.googleapis.com/youtube/v3/';\n\tconstructor(private http: HttpClient) { }\n\t/**\n\t * Searches using the YouTube HTTP Data API\n\t * @param query The query to search for. See the {@link https://developers.google.com/youtube/v3/docs/search/list#q|developer docs}\n\t * for more info.\n\t * @param opts Options for searching\n\t * @returns Results of the search as a stream\n\t */\n\tsearch(query: string, opts: NgxYtdApiSearchOpts): Observable<NgxYtdApiSearchResult> {\n\t\tquery = encodeURI(query);\n\t\tlet _apiUrl = `${this.ytdApiBaseUrl}search?q=${query}&part=snippet,id`;\n\t\t// Loop through every property in the opts object\n\t\tfor (const prop in opts) {\n\t\t\t// Check if property has a non-null value\n\t\t\tif (opts.hasOwnProperty(prop) && opts[prop] !== null) {\n\t\t\t\t// Add parameter to the API URL\n\t\t\t\t_apiUrl += `&${prop}=${encodeURI(opts[prop])}`;\n\t\t\t}\n\t\t}\n\t\treturn this.http.get<NgxYtdApiSearchResult>(_apiUrl);\n\t}\n}\n","import { Version } from '@angular/core';\n\nexport const VERSION = new Version('1.0.0-alpha.3-efd3661-efd3661');\n"]}