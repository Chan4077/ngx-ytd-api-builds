//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ytd-api-videos.interface.js","sourceRoot":"ng://ngx-ytd-api/videos/","sources":["ytd-api-videos.interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  NgxYtdApiGenericOpts,\n  NgxYtdApiGenericResource,\n  NgxYtdApiStandardOpts\n} from 'ngx-ytd-api/common';\n\nexport interface NgxYtdApiVideosResourceSuggestionTagSuggestion {\n  /**\n   * The keyword tag suggested for the video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#suggestions.tagSuggestions[].tag for more info\n   */\n  tag?: string;\n  /**\n   * An array of video categories for which the tag is relevant\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#suggestions.tagSuggestions[].categoryRestricts[] for more info\n   */\n  categoryRestricts?: string[];\n}\n\nexport interface NgxYtdApiVideosResourceAudioStream {\n  /**\n   * The number of audio channels that the stream contains\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.audioStreams[].channelCount for more info\n   */\n  channelCount?: number;\n  /**\n   * The audio codec that the stream uses\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.audioStreams[].codec for more info\n   */\n  codec?: string;\n  /**\n   * The audio stream's bitrate, in bits per second\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.audioStreams[].bitrateBps for more info\n   */\n  bitrateBps?: number;\n  /**\n   * A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.audioStreams[].vendor for more info\n   */\n  vendor?: string;\n}\n\nexport interface NgxYtdApiVideosResourceVideoStream {\n  /**\n   * The encoded video's content width in pixels\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].widthPixels for more info\n   */\n  widthPixels?: number;\n  /**\n   * The encoded video's content height in pixels\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].heightPixels for more info\n   */\n  heightPixels?: number;\n  /**\n   * The video's stream rate in frames per second (FPS)\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].frameRateFps for more info\n   */\n  frameRateFps?: number;\n  /**\n   * The video content's display aspect ratio, which specifies the aspect ratio in which\n   * the video should be displayed.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].aspectRatio for more info\n   */\n  aspectRatio?: number;\n  /**\n   * The video codec that the stream uses\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].codec for more info\n   */\n  codec?: string;\n  /**\n   * The video stream's bitrate in bits per second\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].bitrateBps for more info\n   */\n  bitrateBps?: number;\n  /**\n   * The amount that YouTube needs to rotate the original source content to properly display the video\n   * Valid values:\n   * - `clockwise`: Indicates that the video needs to be rotated 90° clockwise\n   * - `counterClockwise`: Indicates that the video needs to be rotated 90° counter-cockwise\n   * - `none`: Indicates that the video does not need to be rotated\n   * - `other`: Indicates that the video needs to be rotated in some other, non-trivial way\n   * - `upsideDown`: Indicates that the video needs to be rotated upside down\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].rotation for more info\n   */\n  rotation?: string;\n  /**\n   * A value that uniquely identifies a vendor\n   * Note: Typically, the value is a four-letter vendor code\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[].vendor for more info\n   */\n  vendor?: string;\n}\n\nexport interface NgxYtdApiVideosResourceLocalizations {\n  /**\n   * The language of the localized text associated with the key value\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#localizations.(key) for more info\n   */\n  [key: string]: NgxYtdApiVideosResourceLocalization;\n}\n\nexport interface NgxYtdApiVideosResourceLocalization {\n  /**\n   * The localized video title\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#localizations.(key).title for more info\n   */\n  title?: string;\n  /**\n   * The localized video description\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#localizations.(key).description for more info\n   */\n  description?: string;\n}\n\nexport interface NgxYtdApiVideosResourceThumbnails {\n  /**\n   * Valid key values:\n   * - `default`: The default thumbnail image\n   * (Default size of video thumbnail: 120px wide, 90px tall; channel thumbnail: 88px wide, 88px tall)\n   * - `medium`: A higher resolution version of the thumbnail than the `default` resolution image\n   * (Default size of video thumbnail: 320px wide, 180px tall; channel thumbnail: 240px wide, 240px tall)\n   * - `high`: A higher resolution version of the thumbnail than the `medium` resolution image\n   * (Default size of video thumbnail: 480px wide, 360px tall; channel thumbnail: 800px wide, 800px tall)\n   * - `standard`: A higher resolution version of the thumbnail than the `high` resolution image\n   * (Default size of video thumbnail: 640px wide, 480px tall)\n   * - `maxres`: The highest resolution version of the thumbnail\n   * (Default size of video thumbnail: 1280px wide, 720px tall)\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#snippet.thumbnails.(key) for more info\n   */\n  [key: string]: NgxYtdApiVideosResourceThumbnail;\n}\n\nexport interface NgxYtdApiVideosResourceThumbnail {\n  /**\n   * The URL of the thumbnail\n   */\n  url?: string;\n  /**\n   * The width of the thumbnail\n   */\n  width?: number;\n  /**\n   * The height of the thumbnail\n   */\n  height?: number;\n}\n/**\n * A video resource\n */\nexport interface NgxYtdApiVideosResource {\n  /**\n   * Identifies the result's type.\n   * (Note: This value should be set to `youtube#video`)\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#kind for more info\n   */\n  kind?: string;\n  /**\n   * The Etag of this resource.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#etag for more info\n   */\n  etag?: string;\n  /**\n   * The ID used by YouTube to uniquely identify the video.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#id for more info\n   */\n  id?: string;\n  /**\n   * Contains basic details about the video (e.g. title, description, category)\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#snippet for more info\n   */\n  snippet?: {\n    /**\n     * The date and time that the video was published\n     * Note: This time can be different than the time that the video was uploaded\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.publishedAt for more info\n     */\n    publishedAt?: string;\n    /**\n     * The ID used by YouTube to identify the channel that the video was uploaded to\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.channelId for more info\n     */\n    channelId?: string;\n    /**\n     * The video's title\n     * Note: This value has a maximum length of 100 characters and may contain all valid\n     * UTF-8 characters except `<` and `>`.\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.title for more info\n     */\n    title?: string;\n    /**\n     * The video's description\n     * Note: This value has a maximum length of 5000 characters and may contain all valid\n     * UTF-8 characters except `<` and `>`.\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.description for more info\n     */\n    description?: string;\n    /**\n     * An array of thumbnail images associated with the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.thumbnails for more info\n     */\n    thumbnails?: NgxYtdApiVideosResourceThumbnails;\n    /**\n     * The channel title of the channel that the video belongs to\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.channelTitle for more info\n     */\n    channelTitle?: string;\n    /**\n     * An array of keyword tags associated with the video\n     * Note: Tags can contain spaces.\n     * Note: This property's value has a maximum length of 500 characters.\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.tags[] for more info.\n     */\n    tags?: string[];\n    /**\n     * The YouTube video category associated with the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.categoryId for more info\n     */\n    categoryId?: string;\n    /**\n     * Indicates if the video is an upcoming/currently live broadcast\n     * Valid values:\n     * - `live`\n     * - `none`\n     * - `upcoming`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.liveBroadcastContent for more info\n     */\n    liveBroadcastContent?: string;\n    /**\n     * The language of the text in the resource's `snippet.title` and `snippet.description` properties\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.defaultLanguage for more info\n     */\n    defaultLanguage?: string;\n    /**\n     * Contains either a localized title and description for the video or the title in the default\n     * language for the video's metadata\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.localized for more info\n     */\n    localized?: {\n      /**\n       * The localized video title\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#snippet.localized.title for more info\n       */\n      title?: string;\n      /**\n       * The localized description\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#snippet.localized.description for more info\n       */\n      description?: string;\n    };\n    /**\n     * Specifies the language spoken in the video's default audio track\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#snippet.defaultAudioLanguage for more info\n     */\n    defaultAudioLanguage?: string;\n  };\n  /**\n   * Contains info about the video content\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#contentDetails for more info\n   */\n  contentDetails?: {\n    /**\n     * The length of the video in an ISO 8601 duration\n     *\n     * See See https://developers.google.com/youtube/v3/docs/videos#contentDetails.duration for more info\n     */\n    duration?: string;\n    /**\n     * Indicates whether the video is available in 2D or 3D\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.dimension for more info\n     */\n    dimension?: string;\n    /**\n     * Indicates whether the video is available in high definition or only in standard definition\n     * Valid values:\n     * - `hd`\n     * - `sd`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.definition for more info\n     */\n    definition?: string;\n    /**\n     * Indicates whether captions are available for the video\n     * Valid values:\n     * - `false`\n     * - `true`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.caption for more info\n     */\n    caption?: string;\n    /**\n     * Indicates whether the video represents licensed content, which means that the content\n     * was uploaded to a channel linked to a YouTube content partner and then claimed by that\n     * partner.\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.licensedContent for more info\n     */\n    licensedContent?: boolean;\n    /**\n     * Contains info about the countries where a video is/is not viewable.\n     * Note: This object will either have the `allowed` property or the `blocked` property\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.regionRestriction\n     * for more info\n     */\n    regionRestriction?: {\n      /**\n       * A list of region codes that identify countries where the video is viewable in\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.regionRestriction.allowed[]\n       * for more info\n       */\n      allowed?: string[];\n      /**\n       * A list of region codes that identify countries where the video is blocked\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.regionRestriction.blocked[]\n       * for more info\n       */\n      blocked?: string[];\n    };\n    /**\n     * Specifies the rating that the video received under various rating schemes\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.contentRating for more info\n     */\n    contentRating?: {\n      /**\n       * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.contentRating for\n       * all available ratings\n       */\n      [key: string]: string | string[];\n    };\n    /**\n     * Specifies the projection format of the video\n     * Valid values:\n     * - `360`\n     * - `rectangular`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.projection for more info\n     */\n    projection?: string;\n    /**\n     * Indicates whether the video uploader has added a custom thumbnail image for the video\n     * Note: This property is only visible to the video uploader\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#contentDetails.hasCustomThumbnail for more info\n     */\n    hasCustomThumbnail?: boolean;\n  };\n  /**\n   * Contains info about the video's uploading, processing and privacy statuses\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#status for more info\n   */\n  status?: {\n    /**\n     * The status of the uploaded video\n     * Valid values:\n     * - `deleted`\n     * - `failed`\n     * - `processed`\n     * - `rejected`\n     * - `uploaded`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.uploadStatus for more info\n     */\n    uploadStatus?: string;\n    /**\n     * This value explains why a video failed to upload\n     * Note: This property is only present if the `uploadStatus` property indicates that the upload\n     * failed.\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.failureReason for more info\n     */\n    failureReason?: string;\n    /**\n     * This value explains why YouTube rejected the video\n     * Note: This property is only present if the `uploadStatus` property indicates that the upload\n     * was rejected.\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.rejectionReason for more info\n     */\n    rejectionReason?: string;\n    /**\n     * The video's privacy status\n     * Valid values:\n     * - `private`\n     * - `public`\n     * - `unlisted`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.privacyStatus for more info\n     */\n    privacyStatus?: string;\n    /**\n     * The date and time the video is scheduled to publish\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.publishAt for more info\n     */\n    publishAt?: string;\n    /**\n     * The video's license\n     * Valid values:\n     * - `creativeCommon`\n     * - `youtube`\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.license for more info\n     */\n    license?: string;\n    /**\n     * Indicates whether the video can be embeddable on another website\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.embeddable for more info\n     */\n    embeddable?: boolean;\n    /**\n     * Indicates whether the extended video statistics on the video's watch page are publicly\n     * accessible\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#status.publicStatsViewable for more info\n     */\n    publicStatsViewable?: boolean;\n  };\n  /**\n   * Contains statistics about the video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#statistics for more info\n   */\n  statistics?: {\n    /**\n     * The number of times the video has been viewed\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#statistics.viewCount for more info\n     */\n    viewCount?: number;\n    /**\n     * The number of users who have indicated that they have liked the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount for more info\n     */\n    likeCount?: number;\n    /**\n     * The number of users who have indicated that they have disliked the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#statistics.dislikeCount for more info\n     */\n    dislikeCount?: number;\n    /**\n     * See https://developers.google.com/youtube/v3/docs/videos#statistics.favoriteCount for more info\n     *\n     * @deprecated Since 28 August 2015, the property's value is always set to 0\n     */\n    favoriteCount?: number;\n    /**\n     * The number of comments on the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#statistics.commentCount for more info\n     */\n    commentCount?: number;\n  };\n  /**\n   * Contains information used to play the video in an embedded player\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#player for more info\n   */\n  player?: {\n    /**\n     * An `<iframe>` tag that embeds a player that plays the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#player.embedHtml for more info\n     */\n    embedHtml?: string;\n    /**\n     * The height of the player returned in the `player.embedHtml` property\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#player.embedHeight for more info\n     */\n    embedHeight?: number;\n    /**\n     * The width of the player returned in the `player.embedHtml` property\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#player.embedWidth for more info\n     */\n    embedWidth?: number;\n  };\n  /**\n   * Contains information about topics associated with the video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#topicDetails for more info\n   */\n  topicDetails?: {\n    /**\n     * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.topicIds[] for more info\n     * @deprecated Since 10 November 2016, the API no longer returns values for this property,\n     * and any topics associated with a video are now returned by the\n     * `topicDetails.relevantTopicIds[]` property value.\n     */\n    topicIds?: string[];\n    /**\n     * A list of topic IDs that are relevant to the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.relevantTopicIds[] for more info\n     *\n     * @deprecated This has been deprecated since 10 November 2016 and has been unsupported since\n     * 10 November 2017\n     */\n    relevantTopicIds?: string[];\n    /**\n     * A list of Wikipedia URLs that provide a high-level description of the video's content\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.topicCategories[] for more info\n     */\n    topicCategories?: string[];\n  };\n  /**\n   * Contains information about the location, date and address where the video was recorded\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#recordingDetails for more info\n   */\n  recordingDetails?: {\n    /**\n     * The text description of the location where the video was recorded\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#recordingDetails.locationDescription for more info\n     *\n     * @deprecated Since 1 June 2017, this property has been deprecated.\n     */\n    locationDescription?: string;\n    /**\n     * The geolocation information associated with the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.location for more info\n     */\n    location?: {\n      /**\n       * The latitude in degrees\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.location.latitude for more info\n       *\n       * @deprecated Since 1 June 2017, this property has been deprecated\n       */\n      latitude?: number;\n      /**\n       * Longitude in degrees\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.location.longitude for more info\n       *\n       * @deprecated This property has been deprecated since 1 June 2017\n       */\n      longitude?: number;\n      /**\n       * Altitude above the reference ellipsoid, in meters.\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#topicDetails.location.altitude for more info\n       *\n       * @deprecated This property has been deprecated since 9 july 2018\n       */\n      altitude?: number;\n    }\n    /**\n     * The date and time when the video was recorded in ISO 8601 format\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#recordingDetails.recordingDate for more info\n     */\n    recordingDate?: string;\n  };\n  /**\n   * Contains info about the video file that was uploaded to YouTube (such as the file's resolution,\n   * duration, audio, etc.)\n   * Note: This data can only be retrieved by the video owner\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#fileDetails for more info\n   */\n  fileDetails?: {\n    /**\n     * The uploaded file's name\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.fileName for more info\n     */\n    fileName?: string;\n    /**\n     * The uploaded file's size in bytes\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.fileSize for more info\n     */\n    fileSize?: number;\n    /**\n     * The uploaded file's type as detected by YouTube's video processing engine\n     * Valid values:\n     * - `archive`: Indicates that the file is an archive file (e.g. `zip` files)\n     * - `audio`: Indicates that the file is an audio file (e.g. `mp3` files)\n     * - `document`: Indicates that the file is a document/text file (e.g. MS Word documents)\n     * - `image`: Indicates that the file is an image file (e.g. `.jpeg` files)\n     * - `other`: Indicates that the file is another non-video file type\n     * - `project`: Indicates that the file is a video project file (e.g. a Microsoft Windows Movie Maker project)\n     * - `video`: Indicates that the file is a known video file type (e.g. `mp4` files)\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.fileType for more info\n     */\n    fileType?: string;\n    /**\n     * The uploaded video file's container format\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.container for more info\n     */\n    container?: string;\n    /**\n     * An array of video streams contained in the uploaded video file\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.videoStreams[] for more info\n     */\n    videoStreams?: NgxYtdApiVideosResourceVideoStream[];\n    /**\n     * An array of audio streams contained in the uploaded video file\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.audioStreams[] for more info\n     */\n    audioStreams?: NgxYtdApiVideosResourceAudioStream[];\n    /**\n     * The length of the uploaded video in milliseconds\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.durationMs for more info\n     */\n    durationMs?: number;\n    /**\n     * The uploaded video file's combined (audio & video) bitrate in bits per second\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.bitrateBps for more info\n     */\n    bitrateBps?: number;\n    /**\n     * The date and time when the uploaded video file was created in ISO 8601 format\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#fileDetails.creationTime for more info\n     */\n    creationTime?: string;\n  };\n  /**\n   * Contains info about YouTube's progress in processing the uploaded video file\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#processingDetails for more info\n   */\n  processingDetails?: {\n    /**\n     * The video's processing status\n     * Valid values:\n     * - `failed`: Indicates that the video processing has failed\n     * - `processing`: Indicates that the video is currently being processed\n     * - `succeeded`: Indicates that the video has been successfully proceesed\n     * - `terminated`: Indicates that processing information is no longer available\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingStatus for more info\n     */\n    processingStatus?: string;\n    /**\n     * Contains info about the progress YouTube has made in processing the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingProgress for more info\n     */\n    processingProgress?: {\n      /**\n       * An estimate of the total number of parts that need to be processed for the video\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingProgress.partsTotal for more info\n       */\n      partsTotal?: number;\n      /**\n       * Tbe number of parts of the video that YouTube has already processed\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingProgress.partsProcessed for more info\n       */\n      partsProcessed?: number;\n      /**\n       * An estimate of the amount of time, in milliseconds, that YouTube needs to finish processing the video\n       *\n       * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingProgress.timeLeftMs for more info\n       */\n      timeLeftMs?: number;\n    };\n    /**\n     * The reason that YouTube failed to process the video\n     * Valid values:\n     * - `other`: Indicates that some other processing component has failed\n     * - `streamingFailed`: Indicates that the video could not be sent to streamers\n     * - `transcodeFailed`: Indicates that content transcoding has failed\n     * - `uploadFailed`: Indicates that file delivery has failed\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingFailureReason for more info\n     */\n    processingFailureReason?: string;\n    /**\n     * Indicates whether file details are available for the uploaded video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.fileDetailsAvailability for more info\n     */\n    fileDetailsAvailability?: string;\n    /**\n     * Indicates whether the video processing engine has generated suggestions that might improve\n     * YouTube's ability to process the video, warnings that explain video processing problems,\n     * or errors that cause video processing problems\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.processingIssuesAvailability for more info\n     */\n    processingIssuesAvailability?: string;\n    /**\n     * Indicates whether keyword (tag) suggestions are available for the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.tagSuggestionsAvailability for more info\n     */\n    tagSuggestionsAvailability?: string;\n    /**\n     * Indicates whether video editing suggestions, which might improve video quality or the\n     * playback experience, are available for the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.editorSuggestionsAvailability for more info\n     */\n    editorSuggestionsAvailability?: string;\n    /**\n     * Indicates whether thumbnail images have been generated for the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#processingDetails.thumbnailsAvailability for more info\n     */\n    thumbnailsAvailability?: string;\n  };\n  /**\n   * Contains suggestions that identify opportunities to improve the video quality or the metadata\n   * for the uploaded video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#suggestions for more info\n   */\n  suggestions?: {\n    /**\n     * An array of errors that will prevent YouTube from successfully processing the video\n     * Valid values:\n     * - `archiveFile`: An archive file (e.g. a zip archive)\n     * - `audioFile`: An audio file (e.g. an mp3 file)\n     * - `docFile`: A document/text file (e.g. a MS Word document file)\n     * - `imageFile`: An image file (e.g. a jpeg image)\n     * - `notAVideoFile`: Other non-video file\n     * - `projectFile`: Movie project file (e.g. a Microsoft Windows Movie Maker project)\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#suggestions.processingErrors[] for more info\n     */\n    processingErrors?: string[];\n    /**\n     * An array of reasons why YouTube may have difficulty transcoding the uploaded video or that\n     * might result in an erroneous transcoding\n     * Valid values:\n     * - `hasEditlist`: Note that edit lists are currently unsupported\n     * - `inconsistentResolution`: Conflicting container and stream resolutions\n     * - `problematicAudioCodec`: An audio codec that is known to cause problems was used\n     * - `problematicVideoCodec`: A video codec that is known to cause problems was used\n     * - `unknownAudioCodec`: Unrecognized audio codec, transcoding is likely to fail\n     * - `unknownContainer`: Unrecognized file format, transcoding is likely to fail\n     * - `unknownVideoCodec`: Unrecognized video codec, transcoding is likely to fail\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#suggestions.processingWarnings[] for more info\n     */\n    processingWarnings?: string[];\n    /**\n     * An array of suggestions that may improve YouTube's ability to process the video\n     * Valid values:\n     * - `nonStreamableMov`: The MP4 file is not streamable, which will slow down the processing\n     * - `sendBestQualityVideo`: Probably a better quality of the video exists\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#suggestions.processingHints[] for more info\n     */\n    processingHints?: string[];\n    /**\n     * An array of keyword tags that could be added to the video's metadata to increase the chances\n     * that users will find your video when searching or browsing on YouTube\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#suggestions.tagSuggestions[] for more info\n     */\n    tagSuggestions?: NgxYtdApiVideosResourceSuggestionTagSuggestion[];\n    /**\n     * An array of video editing suggestions that might improve the video quality/playback\n     * experience of the uploaded video\n     * Valid values:\n     * - `audioQuietAudioSwap`: The audio track appears silent and could be swapped with a better quality one\n     * - `videoAutoLevels`: Picture brightness levels seem off and could be corrected\n     * - `videoCrop`: Margins (mattes) detected around the picture could be cropped\n     * - `videoStabilize`: The video appears shaky and could be stabilized\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#suggestions.processingHints[] for more info\n     */\n    editorSuggestions?: string[];\n  };\n  /**\n   * Contains metadata about a live video broadcast\n   * Note: This will be present if the video is an upcoming, live or completed live broadcast\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails for more info\n   */\n  liveStreamingDetails?: {\n    /**\n     * The time that the broadcast actually started in ISO 8601 format\n     * Note: This value will not be available until the broadcast begins\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails.actualStartTime for more info\n     */\n    actualStartTime?: string;\n    /**\n     * The time that the broadcast actually ended in ISO 8601 format\n     * Note: This value will not be available until the broadcast begins\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails.actualEndTime for more info\n     */\n    actualEndTime?: string;\n    /**\n     * The time that the broadcast is scheduled to begin in ISO 8601 format\n     * Note: This value will not be available until the broadcast begins\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails.scheduledStartTime for more info\n     */\n    scheduledStartTime?: string;\n    /**\n     * The time that the broadcast is scheduled to end in ISO 8601 format\n     * Note: This value will not be available until the broadcast begins\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails.scheduledEndTime for more info\n     */\n    scheduledEndTime?: string;\n    /**\n     * The number of viewers currently watching the broadcast\n     * Note: This property and its value will be present if the broadcast has current viewers\n     * and the broadcast owner has not hidden the viewcount for the video\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails.scheduledEndTime for more info\n     */\n    concurrentViewers?: number;\n    /**\n     * The ID of the currently active live chat attached to this video\n     * Note: This field is filled only if the video is a currently live broadcast that has live chat\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos#liveStreamingDetails.activeLiveChatId for more info\n     */\n    activeLiveChatId?: string;\n  };\n  /**\n   * Contains translations of the video's metadata\n   */\n  localizations?: NgxYtdApiVideosResourceLocalizations;\n}\nexport interface NgxYtdApiVideosInsertOpts extends NgxYtdApiGenericOpts {\n  /**\n   * Indicates whether YouTube should automatically enhance the video's lighting and color.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/insert#autoLevels for more info\n   */\n  autoLevels?: boolean;\n  /**\n   * Indicates whether YouTube should send a notification about the new video to users who\n   * subscribe to the video's channel\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/insert#notifySubscribers for more info\n   */\n  notifySubscribers?: boolean;\n  /**\n   * Note: This parameter is optional.\n   * Note: This parameter can only be used in a properly authorized request.\n   * Note: This parameter is intended for YouTube content partners.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/insert#onBehalfOfContentOwner for more info\n   */\n  onBehalfOfContentOwner?: string;\n  /**\n   * Note: This parameter is optional.\n   * Note: This parameter can only be used in a properly authorized request.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/insert#onBehalfOfContentOwnerChannel for more info\n   */\n  onBehalfOfContentOwnerChannel?: string;\n  /**\n   * Indicates whether YouTube should adjust the video to remove shaky camera motions\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/insert#stabilize for more info\n   */\n  stabilize?: boolean;\n}\n/**\n * @deprecated Use {@link NgxYtdApiVideosResource} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItem extends NgxYtdApiVideosResource { }\nexport interface NgxYtdApiVideosListResult extends NgxYtdApiGenericResource {\n  /**\n   * The token that can be passed via the `pageToken` parameter to retrieve the next page\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#nextPageToken for more info\n   */\n  nextPageToken?: string;\n  /**\n   * The token that can be passed via the `pageToken` parameter to retrieve the previous page\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#prevPageToken for more info\n   */\n  prevPageToken?: string;\n  /**\n   * Contains paging info for the results\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#pageInfo fror more info\n   */\n  pageInfo?: {\n    /**\n     * The total number of results\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos/list#pageInfo.totalResults for more info\n     */\n    totalResults?: number;\n    /**\n     * The number of results included per page\n     *\n     * See https://developers.google.com/youtube/v3/docs/videos/list#pageInfo.resultsPerPage for more info\n     */\n    resultsPerPage?: number;\n  };\n  /**\n   * A list of videos that match the request criteria\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#items[] for more info\n   */\n  items?: NgxYtdApiVideosResource[];\n}\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceAudioStream} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemAudioStream extends NgxYtdApiVideosResourceAudioStream { }\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceLocalization} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemLocalization extends NgxYtdApiVideosResourceLocalization { }\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceLocalizations} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemLocalizations extends NgxYtdApiVideosResourceLocalizations { }\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceThumbnail} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemThumbnail extends NgxYtdApiVideosResourceThumbnail { }\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceThumbnails} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemThumbnails extends NgxYtdApiVideosResourceThumbnails { }\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceSuggestionTagSuggestion} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemSuggestionTagSuggestion extends NgxYtdApiVideosResourceSuggestionTagSuggestion { }\n\n/**\n * @deprecated Use {@link NgxYtdApiVideosResourceVideoStream} instead\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NgxYtdApiVideosListResultItemVideoStream extends NgxYtdApiVideosResourceVideoStream { }\n\n/**\n * Options for {@link NgxYtdApiVideosService#delete}\n */\nexport interface NgxYtdApiVideosDeleteOpts extends NgxYtdApiStandardOpts {\n  /**\n   * Specifies the YouTube video ID for the resource that is being deleted\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/delete#id for more info\n   */\n  id: string;\n  /**\n   * Note: This parameter is optional.\n   * Note: This parameter can only be used in a properly authorized request.\n   * Note: This parameter is intended for YouTube content partners.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/delete#onBehalfOfContentOwner for more info\n   */\n  onBehalfOfContentOwner?: string;\n}\n/**\n * Options for {@link NgxYtdApiVideosService#getRating}\n */\nexport interface NgxYtdApiVideosGetRatingOpts extends NgxYtdApiGenericOpts {\n  /**\n   * Specifies a comma-separated list of the YouTube video ID(s) for retrieving rating data\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/getRating#id for more info\n   */\n  id: string;\n  /**\n   * Note: This parameter is optional.\n   * Note: This parameter can only be used in a properly authorized request.\n   * Note: This parameter is intended for YouTube content partners.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/getRating#onBehalfOfContentOwner for more info\n   */\n  onBehalfOfContentOwner?: string;\n}\n\nexport interface NgxYtdApiVideosGetRatingItem {\n  /**\n   * The ID that YouTube uses to to uniquely identify the video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/getRating#items[].videoId for more info\n   */\n  videoId?: string;\n  /**\n   * The rating that the authorized user gave to the video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/getRating#items[].rating for more info\n   */\n  rating?: 'dislike' | 'like' | 'none' | 'unspecified';\n}\nexport interface NgxYtdApiVideosGetRatingResult extends NgxYtdApiGenericResource {\n  /**\n   * A list of ratings that match the request criteria\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/getRating#items[] for more info\n   */\n  items?: NgxYtdApiVideosGetRatingItem[];\n}\n\n/**\n * Options for {@link NgxYtdApiVideosService#list}\n */\nexport interface NgxYtdApiVideosListOpts extends NgxYtdApiGenericOpts {\n  /**\n   * Identifies the chart that should be retrieved.\n   * Acceptable values:\n   * - `mostPopular`: Return the most popular videos for the specified content region and video category.\n   * Note: This parameter is a filter and only one filter is allowed\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#chart for more info.\n   */\n  chart?: 'mostPopular';\n  /**\n   * Specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved.\n   * In a video resource, the `id` property specifies the video's ID.\n   * Note: This parameter is a filter and only one filter is allowed\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#id for more info\n   */\n  id?: string;\n  /**\n   * Specifies the API to return videos that are liked or disliked by the authenticated user\n   * Acceptable values:\n   * - `dislike`: Returns only videos that are disliked by the authenticated user\n   * - `like`: Returns only videos that are liked by the authenticated user\n   * Note: This parameter can only be used in a properly authorized request.\n   * Note: This parameter is a filter and only one filter is allowed\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#myRating for more info\n   */\n  myRating?: 'dislike' | 'like';\n  /**\n   * Specifies the API to return localized resource metadata for a specific language that the YouTube website supports.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#hl for more info\n   */\n  hl?: string;\n  /**\n   * Specifies the maximum height of the embedded YouTube player returned in the `player.embedHtml` property.\n   * This parameter can be used to specify a height appropriate for your app's layout.\n   * See https://developers.google.com/youtube/v3/docs/videos/list#maxHeight for more info\n   * Note: If the `maxWidth` property is also specified, the player may be shorter\n   * than the `maxHeight` in order to not violate the maximum width.\n   * Acceptable values are 72 to 8192, inclusive.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#maxHeight for more info\n   */\n  maxHeight?: number;\n  /**\n   * Specifies the maximum results that should be returned.\n   * Note: This parameter is to be used for the `myRating` parameter, but should not\n   * be used with the `id` parameter.\n   * Acceptable values: 1 to 50, inclusive. 5 is the default number.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#maxResults for more info\n   */\n  maxResults?: number;\n  /**\n   * Specifies the maximum width of the embedded YouTube player returned in the `player.embedHtml` property.\n   * This parameter can be used to specify a width appropriate for your app's layout.\n   * Note: If the `maxHeight` property is also specified, the player may be shorter\n   * than the `maxWidth` in order to not violate the maximum width.\n   * Acceptable values are 72 to 8192, inclusive.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#maxWidthfor more info\n   */\n  maxWidth?: number;\n  /**\n   * Indicates that the request's authorization credentials identify a YouTube CMS user who is\n   * acting on behalf of the content owner specified in the parameter value.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#onBehalfOfContentOwner for more info\n   */\n  onBehalfOfContentOwner?: string;\n  /**\n   * Identifies a specific page in the result set that should be returned.\n   * Note: This parameter is to be used with the `myRating` parameter, but is not to be used\n   * with the `id` parameter.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#pageToken for more info\n   */\n  pageToken?: string;\n  /**\n   * Tells the API to select a video chart available in the specific region.\n   * Note: This parameter is to only be used with the `chart` parameter.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#regionCode for more info\n   */\n  regionCode?: string;\n  /**\n   * This property identifies the video category for which the video should be retrieved.\n   * Note: This parameter is to only be used with the `chart` parameter.\n   * By default, charts are not restricted to a particular category.\n   * The default value is 0.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list#regionCode for more info\n   */\n  videoCategoryById?: string;\n}\n/**\n * Options for {@link NgxYtdApiVideosService#rate}\n */\nexport interface NgxYtdApiVideosRateOpts extends NgxYtdApiStandardOpts {\n  /**\n   * Specifies the YouTube video ID that is being rated or having its rating removed\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/rate#id for more info\n   */\n  id: string;\n  /**\n   * Specifies the rating to record\n   * Acceptable values:\n   * - `dislike`: Records that the authenticated user disliked the video\n   * - `like`: Records that the authenticated user liked the video\n   * - `none`: Removes any rating that the authenticated user previously set for the video\n   */\n  rating: 'dislike' | 'like' | 'none';\n}\n/**\n * Options for {@link NgxYtdApiVideosService#reportAbuse}\n */\nexport interface NgxYtdApiVideosReportAbuseOpts extends NgxYtdApiStandardOpts {\n  /**\n   * Note: This parameter is optional.\n   * Note: This parameter can only be used in a properly authorized request.\n   * Note: This parameter is intended for YouTube content partners.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/reportAbuse#onBehalfOfContentOwner for more info\n   */\n  onBehalfOfContentOwner?: string;\n}\n/**\n * Options for the request body of {@link NgxYtdApiVideosService#reportAbuse}\n */\nexport interface NgxYtdApiVideosReportAbuseBody {\n  /**\n   * The video that is being reported for abusive content\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/reportAbuse#videoId for more info\n   */\n  videoId: string;\n  /**\n   * Specifies the reason that the video is being reported for containing abusive content\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/reportAbuse#reasonId for more info\n   */\n  reasonId: string;\n  /**\n   * Specifies the secondary reason that the video is being reported for containing abusive content\n   *\n   * See zhttps://developers.google.com/youtube/v3/docs/videos/reportAbuse#secondaryReasonId for more info\n   */\n  secondaryReasonId?: string;\n  /**\n   * Provides any additional information that the reporter wants to add\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/reportAbuse#comments for more info\n   */\n  comments?: string;\n  /**\n   * Identifies a language spoken by the reporter\n   */\n  language?: string;\n}\n\nexport interface NgxYtdApiVideosUpdateOpts extends NgxYtdApiGenericOpts {\n  /**\n   * Note: This parameter is optional.\n   * Note: This parameter can only be used in a properly authorized request.\n   * Note: This parameter is intended for YouTube content partners.\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/update#onBehalfOfContentOwner for more info\n   */\n  onBehalfOfContentOwner?: string;\n}\n"]}