{"version":3,"file":"ngx-ytd-api-common.js.map","sources":["ng://ngx-ytd-api/common/ytd-api-common.injectors.ts","ng://ngx-ytd-api/common/ytd-api-common.service.ts","ng://ngx-ytd-api/common/ytd-api-common.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NgxYtdApiStandardParams } from './ytd-api-common.interface';\n\n/** Injection token that can be used to specify the standard query parameters for all API endpoints. */\nexport const NGX_YTD_API_DEFAULT_STANDARD_PARAMS = new InjectionToken<NgxYtdApiStandardParams>('ngx-ytd-api-default-standard-params');\n\n/**\n * Injection token that can be used to specify the standard query parameters for all API endpoints.\n * @deprecated Use {@link NGX_YTD_API_DEFAULT_STANDARD_PARAMS}\n */\nexport const NGX_YTD_API_DEFAULT_STANDARD_OPTIONS = NGX_YTD_API_DEFAULT_STANDARD_PARAMS;\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable, Inject, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SimpleHttpService } from 'ngx-simple-http';\nimport { NGX_YTD_API_DEFAULT_STANDARD_OPTIONS } from './ytd-api-common.injectors';\nimport { NgxYtdApiStandardParams } from './ytd-api-common.interface';\n\n@Injectable()\nexport class NgxYtdApiCommonService {\n  constructor(\n    private http: SimpleHttpService,\n    @Inject(NGX_YTD_API_DEFAULT_STANDARD_OPTIONS) @Optional() private defaultOptions: NgxYtdApiStandardParams\n  ) { }\n  /**\n   * Checks for the following:\n   * 1. The `key` exists in `obj`\n   * 2. The key-value of `key` in `obj` is not `null`\n   * @param obj The object to check\n   * @param key The key to check for in `obj`\n   * @template O The TypeScript interface to type `obj` against\n   * @returns `true` if all conditions are met, `false` otherwise\n   */\n  private keyValueExistsAndNonNull<O extends Object>(obj: O, key: string): boolean {\n    return key in obj && typeof obj[key] !== null;\n  }\n  /**\n   * Merges an API request's options with the default standard options as\n   * specified via the `NGX_YTD_API_DEFAULT_STANDARD_OPTIONS` injection token\n   * @param opts The API request's options\n   * @template T A TypeScript interface to type `opts` against\n   * @returns The merged API request's options\n   * @deprecated Use {@link NgxYtdApiCommonService#mergeParamsWithStandardParams}\n   */\n  mergeOpts<T extends any>(opts: T): T & NgxYtdApiStandardParams {\n    return this.mergeParamsWithStandardParams<T>(opts);\n  }\n  /**\n   * Merges an API request's parameters with the default standard parameters as\n   * specified via the `NGX_YTD_API_DEFAULT_STANDARD_OPTIONS` injection token\n   * @param opts The API request's options\n   * @template T A TypeScript interface to type `opts` against\n   * @returns The merged API request's options\n   */\n  mergeParamsWithStandardParams<T extends any>(opts: T): T & NgxYtdApiStandardParams {\n    if (this.defaultOptions) {\n      return { ...opts, ...this.defaultOptions };\n    } else {\n      return opts;\n    }\n  }\n  /**\n   * Sends a HTTP request to the specified `apiEndpoint`\n   * @param apiEndpoint The API endpoint to send a HTTP request to\n   * @param opts Options to append to the endpoint as URL queries\n   * @param body The body of the HTTP request\n   * @param httpType The type of HTTP request to send\n   * @template B A TypeScript interface to type the HTTP request's body to\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's result to\n   * @returns The result of the HTTP request\n   */\n  sendHttpRequest<B extends any, P extends any, R extends any>(\n    apiEndpoint: string,\n    opts: P,\n    body: B = null,\n    httpType: 'delete' | 'get' | 'post' | 'put'\n  ): Observable<R> {\n    let headers: HttpHeaders;\n    if (this.keyValueExistsAndNonNull<P>(opts, 'accessToken')) {\n      if (this.keyValueExistsAndNonNull<P>(opts, 'accessTokenUsesParam') && opts['accessTokenUsesParam']) {\n        // Using parameter\n        opts['access_token'] = opts['accessToken'];\n        delete opts['accessToken'];\n        // We don't want to pass this to the actual API endpoint\n        delete opts['accessTokenUsesParam'];\n      } else {\n        // Using HTTP headers\n        headers = new HttpHeaders()\n          .set('Authorization', `Bearer ${opts['accessToken']}`);\n      }\n    }\n    switch (httpType) {\n      case 'delete':\n        if (headers) {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts);\n        }\n      case 'get':\n        if (headers) {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts);\n        }\n      case 'post':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n      case 'put':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxYtdApiCommonService } from './ytd-api-common.service';\nimport { SimpleHttpModule } from 'ngx-simple-http';\n\n@NgModule({\n  imports: [\n    SimpleHttpModule\n  ],\n  providers: [\n    NgxYtdApiCommonService\n  ]\n})\nexport class NgxYtdApiCommonModule { }\n"],"names":[],"mappings":"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"}
