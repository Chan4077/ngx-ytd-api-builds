/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function NgxYtdApiCommentListOpts() { }
/**
 * Specifies a comma-separated list of comment IDs for the resources that are being retrieved.
 *
 * See the {\@link https://developers.google.com/youtube/v3/docs/comments/list#id|developer docs} for more info
 * Note: This parameter is a filter, where only one filter should be specified
 * @type {?|undefined}
 */
NgxYtdApiCommentListOpts.prototype.id;
/**
 * Specifies the ID of the comment for which replies should be retrieved.
 *
 * See the {\@link https://developers.google.com/youtube/v3/docs/comments/list#parentId|developer docs} for more info
 * Note: This parameter is a filter, where only one filter should be specified
 * @type {?|undefined}
 */
NgxYtdApiCommentListOpts.prototype.parentId;
/**
 * Specifies the maximum number of items that should be returned in the results.
 *
 * See the {\@link https://developers.google.com/youtube/v3/docs/comments/list#parentId|developer docs} for more info
 * Note: This parameter is not supported for use in conjunction with the id parameter.
 * Acceptable values are 1 to 100, inclusive. The default value is 20.
 * @type {?|undefined}
 */
NgxYtdApiCommentListOpts.prototype.maxResults;
/**
 * Identifies a specific page in the result set that should be returned.
 *
 * See the {\@link https://developers.google.com/youtube/v3/docs/comments/list#parentId|developer docs} for more info
 * Note: This parameter is not supported for use in conjunction with the id parameter.
 * @type {?|undefined}
 */
NgxYtdApiCommentListOpts.prototype.pageToken;
/**
 * Indicates whether the API should return comments formatted as HTML or as plain text.
 *
 * See the {\@link https://developers.google.com/youtube/v3/docs/comments/list#parentId|developer docs} for more info
 * Acceptable values are:
 * - html – Returns the comments in HTML format. This is the default value.
 * - plainText – Returns the comments in plain text format.
 * @type {?|undefined}
 */
NgxYtdApiCommentListOpts.prototype.textFormat;
/**
 * @record
 */
export function NgxYtdApiCommentListResultItem() { }
/**
 * Identifies the API resource's type.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResultItem.prototype.kind;
/**
 * The Etag of this resource.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResultItem.prototype.etag;
/**
 * The ID that YouTube uses to uniquely identify the comment.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResultItem.prototype.id;
/**
 * The snippet object contains basic details about the comment.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResultItem.prototype.snippet;
/**
 * @record
 */
export function NgxYtdApiCommentListResult() { }
/**
 * The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResult.prototype.nextPageToken;
/**
 * The `pageInfo` object encapsulates paging information for the result set.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResult.prototype.pageInfo;
/**
 * A list of comments that match the request criteria.
 * @type {?|undefined}
 */
NgxYtdApiCommentListResult.prototype.items;

//# sourceMappingURL=data:application/json;base64,