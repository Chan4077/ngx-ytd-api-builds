{"version":3,"sources":["ng://ngx-ytd-api/videos/ytd-api-videos.service.ts","ng://ngx-ytd-api/videos/ytd-api-videos.module.ts"],"names":["NgxYtdApiVideosService","http","this","ngxYtdVideosApiUrl","ngxYtdVideoUploadsApiUrl","prototype","_httpHandler","apiEndpoint","opts","body","httpType","headers","undefined","HttpHeaders","set","createHttpDelete","createHttpGet","createHttpPost","createHttpPut","delete","getRating","insert","list","rate","reportAbuse","update","Injectable","args","providedIn","SimpleHttpService","NgxYtdApiVideosModule","NgModule","imports","SimpleHttpModule","providers"],"mappings":"wbAAA,IAAAA,EAAA,WAsBE,SAAAA,EACUC,GAAAC,KAAAD,KAAAA,EAKDC,KAAAC,mBAAqB,+CAIrBD,KAAAE,yBAA2B,6DAE5BJ,EAAAK,UAAAC,aAAR,SACEC,EACAC,EACAC,EACAC,OAEIC,EAKJ,YARA,IAAAF,IAAAA,EAAA,MAII,gBAAiBD,UAAeA,EAAkB,cAAMI,WAAqC,OAAxBJ,EAAkB,cACzFG,GAAU,IAAIE,EAAAA,aACXC,IAAI,gBAAiB,UAAUN,EAAkB,cAE9CE,GACN,IAAK,SACH,OAAIC,EACKT,KAAKD,KAAKc,iBAAuBR,EAAaC,EAAMG,GAEpDT,KAAKD,KAAKc,iBAAuBR,EAAaC,GAEzD,IAAK,MACH,OAAIG,EACKT,KAAKD,KAAKe,cAAoBT,EAAaC,EAAMG,GAEjDT,KAAKD,KAAKe,cAAoBT,EAAaC,GAEtD,IAAK,OACH,OAAIG,EACEF,EACKP,KAAKD,KAAKgB,eAAwBV,EAAaC,EAAMC,EAAME,GAE3DT,KAAKD,KAAKgB,eAAwBV,EAAaC,EAAM,KAAMG,GAGhEF,EACKP,KAAKD,KAAKgB,eAAwBV,EAAaC,EAAMC,GAErDP,KAAKD,KAAKgB,eAAwBV,EAAaC,EAAM,MAGlE,IAAK,MACH,OAAIG,EACEF,EACKP,KAAKD,KAAKiB,cAAuBX,EAAaC,EAAMC,EAAME,GAE1DT,KAAKD,KAAKiB,cAAuBX,EAAaC,EAAM,KAAMG,GAG/DF,EACKP,KAAKD,KAAKiB,cAAuBX,EAAaC,EAAMC,GAEpDP,KAAKD,KAAKiB,cAAuBX,EAAaC,EAAM,QAYrER,EAAAK,UAAAc,UAAA,SAAOX,GACL,OAAON,KAAKI,aACVJ,KAAKC,mBACLK,EACA,KACA,WAUJR,EAAAK,UAAAe,UAAA,SAAUZ,GACR,OAAON,KAAKI,aACPJ,KAAKC,mBAAkB,aAC1BK,EACA,KACA,QAWJR,EAAAK,UAAAgB,OAAA,SAAOZ,EAA+BD,GACpC,OAAON,KAAKI,aACVJ,KAAKE,yBACLI,EACAC,EACA,SAUJT,EAAAK,UAAAiB,KAAA,SAAKd,GACH,OAAON,KAAKI,aACVJ,KAAKC,mBACLK,EACA,KACA,QAUJR,EAAAK,UAAAkB,KAAA,SAAKf,GACH,OAAON,KAAKI,aACPJ,KAAKC,mBAAkB,QAC1BK,EACA,KACA,SAWJR,EAAAK,UAAAmB,YAAA,SAAYf,EAAsCD,GAChD,OAAON,KAAKI,aACPJ,KAAKC,mBAAkB,eAC1BK,EACAC,EACA,SAWJT,EAAAK,UAAAoB,OAAA,SAAOhB,EAA+BD,GACpC,OAAON,KAAKI,aACVJ,KAAKC,mBACLK,EACAC,EACA,4BA/KLiB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAlBLC,EAAAA,yJADT,GCAAC,EAAA,WAIA,SAAAA,KAQqC,2BARpCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CACPC,EAAAA,kBAEFC,UAAW,CACTlC,OAGiC8B,EAZrC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SimpleHttpService } from 'ngx-simple-http';\nimport { Observable } from 'rxjs';\nimport {\n  NgxYtdApiVideosDeleteOpts,\n  NgxYtdApiVideosGetRatingOpts,\n  NgxYtdApiVideosGetRatingResult,\n  NgxYtdApiVideosInsertOpts,\n  NgxYtdApiVideosListOpts,\n  NgxYtdApiVideosListResult,\n  NgxYtdApiVideosRateOpts,\n  NgxYtdApiVideosReportAbuseBody,\n  NgxYtdApiVideosReportAbuseOpts,\n  NgxYtdApiVideosResource,\n  NgxYtdApiVideosUpdateOpts\n} from './ytd-api-videos.interface';\nimport { HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxYtdApiVideosService {\n  constructor(\n    private http: SimpleHttpService\n  ) { }\n  /**\n   * The API URL for the Videos API of the YouTube Data v3 API\n   */\n  readonly ngxYtdVideosApiUrl = 'https://www.googleapis.com/youtube/v3/videos';\n  /**\n   * The API URL for the Videos API for uploading a video of the YouTube Data v3 API\n   */\n  readonly ngxYtdVideoUploadsApiUrl = 'https://www.googleapis.com/upload/youtube/v3/videos';\n  // Handler for HTTP requests\n  private _httpHandler<B extends any, P extends any, R extends any>(\n    apiEndpoint: string,\n    opts: P,\n    body: B = null,\n    httpType: 'delete' | 'get' | 'post' | 'put'\n  ): Observable<R> {\n    let headers: HttpHeaders;\n    if ('accessToken' in opts && typeof opts['accessToken'] !== undefined && opts['accessToken'] !== null) {\n      headers = new HttpHeaders()\n        .set('Authorization', `Bearer ${opts['accessToken']}`);\n    }\n    switch (httpType) {\n      case 'delete':\n        if (headers) {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts);\n        }\n      case 'get':\n        if (headers) {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts);\n        }\n      case 'post':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n      case 'put':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n    }\n  }\n  /**\n   * Deletes a YouTube video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/delete for more info\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  delete(opts: NgxYtdApiVideosDeleteOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiVideosDeleteOpts, any>(\n      this.ngxYtdVideosApiUrl,\n      opts,\n      null,\n      'delete'\n    );\n  }\n  /**\n   * Retrieves the ratings that the authorized user gave to a list of specified videos\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/getRating for more info\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  getRating(opts: NgxYtdApiVideosGetRatingOpts): Observable<NgxYtdApiVideosGetRatingResult> {\n    return this._httpHandler<any, NgxYtdApiVideosGetRatingOpts, NgxYtdApiVideosGetRatingResult>(\n      `${this.ngxYtdVideosApiUrl}/getRating`,\n      opts,\n      null,\n      'get'\n    );\n  }\n  /**\n   * Uploads a video to YouTube and optionally sets the video's metadata\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/insert for more info\n   * @param body The HTTP request body\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  insert(body: NgxYtdApiVideosResource, opts: NgxYtdApiVideosInsertOpts): Observable<NgxYtdApiVideosResource> {\n    return this._httpHandler<any, NgxYtdApiVideosInsertOpts, NgxYtdApiVideosResource>(\n      this.ngxYtdVideoUploadsApiUrl,\n      opts,\n      body,\n      'post'\n    );\n  }\n  /**\n   * Returns a list of videos that match the requested API parameters\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/list for more info\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  list(opts: NgxYtdApiVideosListOpts): Observable<NgxYtdApiVideosListResult> {\n    return this._httpHandler<any, NgxYtdApiVideosListOpts, NgxYtdApiVideosListResult>(\n      this.ngxYtdVideosApiUrl,\n      opts,\n      null,\n      'get'\n    );\n  }\n  /**\n   * Add a like or dislike rating to a video or remove a rating from a video\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/rate for more info\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  rate(opts: NgxYtdApiVideosRateOpts): Observable<any> {\n    return this._httpHandler<any, NgxYtdApiVideosRateOpts, any>(\n      `${this.ngxYtdVideosApiUrl}/rate`,\n      opts,\n      null,\n      'post'\n    );\n  }\n  /**\n   * Reports a video for having abusive content\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/reportAbuse for more info\n   * @param body The HTTP request body\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  reportAbuse(body: NgxYtdApiVideosReportAbuseBody, opts?: NgxYtdApiVideosReportAbuseOpts): Observable<any> {\n    return this._httpHandler<NgxYtdApiVideosReportAbuseBody, NgxYtdApiVideosReportAbuseOpts, any>(\n      `${this.ngxYtdVideosApiUrl}/reportAbuse`,\n      opts,\n      body,\n      'post'\n    );\n  }\n  /**\n   * Updates a video's metadata\n   *\n   * See https://developers.google.com/youtube/v3/docs/videos/update for more info\n   * @param body The HTTP request body\n   * @param opts API parameters for the API\n   * @return An observable of the HTTP request\n   */\n  update(body: NgxYtdApiVideosResource, opts: NgxYtdApiVideosUpdateOpts): Observable<NgxYtdApiVideosResource> {\n    return this._httpHandler<NgxYtdApiVideosResource, NgxYtdApiVideosUpdateOpts, NgxYtdApiVideosResource>(\n      this.ngxYtdVideosApiUrl,\n      opts,\n      body,\n      'put'\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleHttpModule } from 'ngx-simple-http';\nimport { NgxYtdApiVideosService } from './ytd-api-videos.service';\n\n@NgModule({\n  imports: [\n    SimpleHttpModule\n  ],\n  providers: [\n    NgxYtdApiVideosService\n  ]\n})\nexport class NgxYtdApiVideosModule { }\n"]}