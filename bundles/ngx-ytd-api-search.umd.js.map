{"version":3,"file":"ngx-ytd-api-search.umd.js.map","sources":["ng://ngx-ytd-api/search/ytd-api-search.service.ts","ng://ngx-ytd-api/search/ytd-api-search.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { NgxYtdApiSearchListOpts, NgxYtdApiSearchListResult } from './ytd-api-search.interfaces';\nimport { SimpleHttpService } from 'ngx-simple-http';\n\n@Injectable()\nexport class NgxYtdApiSearchService {\n  constructor(\n    private http: SimpleHttpService\n  ) { }\n  /**\n   * The API URL for the Search API of the YouTube Data v3 API\n   */\n  readonly ngxYtdSearchApiUrl = 'https://www.googleapis.com/youtube/v3/search';\n  // Handler for HTTP requests\n  private _httpHandler<B extends any, P extends any, R extends any>(\n    apiEndpoint: string,\n    opts: P,\n    body: B = null,\n    httpType: 'delete' | 'get' | 'post' | 'put'\n  ): Observable<R> {\n    let headers: HttpHeaders;\n    if ('accessToken' in opts && typeof opts['accessToken'] !== undefined && opts['accessToken'] !== null) {\n      headers = new HttpHeaders()\n        .set('Authorization', `Bearer ${opts['accessToken']}`);\n    }\n    switch (httpType) {\n      case 'delete':\n        if (headers) {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpDelete<P, R>(apiEndpoint, opts);\n        }\n      case 'get':\n        if (headers) {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts, headers);\n        } else {\n          return this.http.createHttpGet<P, R>(apiEndpoint, opts);\n        }\n      case 'post':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPost<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n      case 'put':\n        if (headers) {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body, headers);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null, headers);\n          }\n        } else {\n          if (body) {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, body);\n          } else {\n            return this.http.createHttpPut<B, P, R>(apiEndpoint, opts, null);\n          }\n        }\n    }\n  }\n  /**\n   * Returns a collection of search results that match the query parameters specified\n   *\n   * See https://developers.google.com/youtube/v3/docs/search/list for more info\n   * @param opts API parameters for the API\n   * @return Results of the search has an `Observable`\n   */\n  list(opts: NgxYtdApiSearchListOpts): Observable<NgxYtdApiSearchListResult> {\n    return this._httpHandler<any, NgxYtdApiSearchListOpts, NgxYtdApiSearchListResult>(\n      this.ngxYtdSearchApiUrl,\n      opts,\n      null,\n      'get'\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleHttpModule } from 'ngx-simple-http';\nimport { NgxYtdApiSearchService } from './ytd-api-search.service';\n\n@NgModule({\n  imports: [\n    SimpleHttpModule\n  ],\n  providers: [\n    NgxYtdApiSearchService\n  ]\n})\nexport class NgxYtdApiSearchModule { }\n"],"names":["http","HttpHeaders","Injectable","SimpleHttpService","NgModule","SimpleHttpModule"],"mappings":"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"}
